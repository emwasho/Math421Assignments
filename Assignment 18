{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.\tThe target is Import the data and correct the type of variables\n",
    "2.\tQuick Clean the data to handle missing values\n",
    "3.\tSplit the data into 70% training, 30% testing\n",
    "4.\tTrain and test random forest (ranger).  Report the misclassification/accuracy and balanced accuracy. \n",
    "5.\tReport the ratio of Default: Non-Default clients. \n",
    "6.\tThe target is imbalanced.  Thus, it affects the sensitivity, or true positive rate. Follow the below steps to balance the data using undersampling: \n",
    "-\tSplit the training data into two dataset:  train1 that contains default clients and train0 containing non-default clients.  Let n1 and n0 be the size of these two data respectively. \n",
    "-\tSelect randomly n1 clients from the dataset train0.  (You can use the sample function for this). Let train00 be the dataset containing these clients. \n",
    "-\tCombine (using rbind function) by row train00 and train1 to get dataset train_under\n",
    "-\tTrain random forest (ranger) on train_under\n",
    "-\tTest the model on the test data and report the balanced accuracy.\n",
    "Questions 1-6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Accuracy \n",
    "0.9496676 \n",
    "Balanced Accuracy \n",
    "        0.7316145 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in parse(text = x, srcfile = src): attempt to use zero-length variable name\n",
     "execution_count": 1,
     "output_type": "error",
     "traceback": [
      "Error in parse(text = x, srcfile = src): attempt to use zero-length variable name\nTraceback:\n"
     ]
    }
   ],
   "source": [
    "```{r}\n",
    "\n",
    "df =read.csv(\"C:/Users/student/Documents/Bryant/Senior '18-'19/R/assignment 18.csv\")\n",
    "summary(df)\n",
    "d <- df[complete.cases(df),]\n",
    "nrow(d)\n",
    "d$BAD = as.factor(d$BAD)\n",
    "names(d)[1]\n",
    "names(d)[1] = 'target'\n",
    "table(d$target)\n",
    "\n",
    "library(caret)\n",
    "library(ggplot2)\n",
    "library(lattice)\n",
    "library(ranger)\n",
    "splitIndex <-createDataPartition(d$target, p=.70, list = FALSE, times = 1)\n",
    "train <-d[splitIndex,]\n",
    "test <- d[-splitIndex,]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "model = ranger(target~., data = train)\n",
    "pred = predict(model, data = test)$predictions\n",
    "cm=confusionMatrix(pred, test$target, positive = \"1\")\n",
    "cm\n",
    "\n",
    "table(d$target)\n",
    "\n",
    "prop.table(table(d$target))\n",
    "\n",
    "train1 = train[train$target == \"1\",]\n",
    "nrow(train1)\n",
    "\n",
    "\n",
    "\n",
    "table(train1$target)\n",
    "\n",
    "train0 = train[train$target == '0',]\n",
    "table(train0$target)\n",
    "\n",
    "sample(1:10, 3)\n",
    "\n",
    "sample(nrow(train0), 217)\n",
    "\n",
    "sample(nrow(train0), nrow(train1))\n",
    "\n",
    "\n",
    "n=nrow(train0)\n",
    "n1 = nrow(train1)\n",
    "train0[sample(1:n, n1, replace = TRUE),]\n",
    "\n",
    "train00=train0[sample(1:n,n1, replace = TRUE),]\n",
    "\n",
    "train_under=rbind(train00,train1)\n",
    "model_under=ranger(target~.,data=train_under)\n",
    "pred_under=predict(model_under,data=test)$predictions\n",
    "cm_under=confusionMatrix(pred_under,test$target,positive=\"1\")\n",
    "cm_under$overall['Accuracy']\n",
    "cm_under$byClass['Balanced Accuracy']\n",
    "\n",
    "\n",
    "table(train_under$target)\n",
    "##write.csv(train_under, 'train_under.csv')\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7.\tFollow the below steps to balance the data using oversampling    \n",
    "-\tSplit the training data into two dataset:  train1 that contains default clients and train0 containing non-default clients.  Let n1 and n0 be the size of these two data respectively. \n",
    "-\tSelect randomly n0 clients from the dataset train1, with replacement.  (You can use the sample function for this). Let train11 be the dataset containing these clients. \n",
    "-\tCombine by row train0 and train11 to get dataset train_over\n",
    "-\tTrain random forest (ranger) on traino_over\n",
    "-\tTest the model on the test data and report the balanced accuracy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "```{r}\n",
    "\n",
    "summary(df)\n",
    "d <- df[complete.cases(df),]\n",
    "d$BAD = as.factor(d$BAD)\n",
    "nrow(d)\n",
    "names(d)[1]\n",
    "names(d)[1] = 'target'\n",
    "table(d$target)\n",
    "\n",
    "splitIndex <-createDataPartition(d$target, p=.70, list = FALSE, times = 1)\n",
    "train <-d[splitIndex,]\n",
    "test <- d[-splitIndex,]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "model = ranger(target~., data = train)\n",
    "pred = predict(model, data = test)$predictions\n",
    "cm=confusionMatrix(pred, test$target, positive = \"1\")\n",
    "cm\n",
    "\n",
    "table(d$target)\n",
    "\n",
    "prop.table(table(d$target))\n",
    "\n",
    "train1 = train[train$target == \"1\",]\n",
    "nrow(train1)\n",
    "\n",
    "table(train1$target)\n",
    "\n",
    "train0 = train[train$target == '0',]\n",
    "table(train0$target)\n",
    "\n",
    "sample(1:10, 3)\n",
    "\n",
    "sample(nrow(train0), 217)\n",
    "\n",
    "sample(nrow(train0), nrow(train1))\n",
    "\n",
    "\n",
    "n0=nrow(train0)\n",
    "n1 = nrow(train1)\n",
    "train11 = train1[sample(1:n1, n0, replace = TRUE),]\n",
    "\n",
    "\n",
    "train_over=rbind(train11,train0)\n",
    "model_over=ranger(target~.,data=train_over)\n",
    "pred_over=predict(model_over,data=test)$predictions\n",
    "cm_over=confusionMatrix(pred_over,test$target,positive=\"1\")\n",
    "cm_over$overall['Accuracy']\n",
    "cm_over$byClass['Balanced Accuracy']\n",
    "\n",
    "\n",
    "table(train_over$target)\n",
    "##write.csv(train_under, 'train_over.csv')\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8.\tWrite a function called Quick_bal.  This function takes\n",
    "-\tInputs:  a dataset argument with a target variable named target; a method argument specifying undersampling or oversampling\n",
    "-\tOutput: a dataset with a balanced target. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "```{r}\n",
    "Quick_bal <- function(x,m){\n",
    "  names(x)[1] = 'target'\n",
    "  splitIndex <- createDataPartition(x$target, p=.70, list = FALSE, times = 1)\n",
    "  train <-d[splitIndex,]\n",
    "  test <- d[-splitIndex,]\n",
    "\n",
    "    if(m==1){\n",
    "      train1 = train[train$target == \"1\",]\n",
    "      train0 = train[train$target == \"0\",]\n",
    "      n0 = nrow(train0)\n",
    "      n1 = nrow(train1)\n",
    "      train00 = train0[sample(1:n0, n1),]\n",
    "      train_under = rbind(train00, train1)\n",
    "    }\n",
    "      if(m == 2){\n",
    "        train1 = train[train$target == \"1\",]\n",
    "        train0 = train[train$target == \"0\",]\n",
    "        n0 = nrow(train0)\n",
    "        n1 = nrow(train1)\n",
    "        train11 = train1[sample(1:n1, n0, replace = TRUE),]\n",
    "        train_over = rbind(train0, train11)\n",
    "      }\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9.\tPut 6 and 7 into a function called Quick_model_bal. This function takes\n",
    "-\tInputs: a dataset with a target variable named target \n",
    "-\tOutput: the balanced accuracies of random forest with undersampling and oversampling being applied on the training dataset. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "```{r}\n",
    "Quick_model_bal <- function(x,m){\n",
    "  names(x)[1] = 'target'\n",
    "  splitIndex <- createDataPartition(x$target, p=.70, list = FALSE, times = 1)\n",
    "  train <-d[splitIndex,]\n",
    "  test <- d[-splitIndex,]\n",
    "  \n",
    "  print(\"Undersample:\")\n",
    "  model_under=ranger(target~.,data=train_under)\n",
    "pred_under=predict(model_under,data=test)$predictions\n",
    "cm_under=confusionMatrix(pred_under,test$target,positive=\"1\")\n",
    "cm_under$overall['Accuracy']\n",
    "cm_under$byClass['Balanced Accuracy']\n",
    "  \n",
    "  \n",
    "  print(\"Oversample:\")\n",
    "  train_over=rbind(train11,train0)\n",
    "model_over=ranger(target~.,data=train_over)\n",
    "pred_over=predict(model_over,data=test)$predictions\n",
    "cm_over=confusionMatrix(pred_over,test$target,positive=\"1\")\n",
    "cm_over$overall['Accuracy']\n",
    "cm_over$byClass['Balanced Accuracy']\n",
    "}\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
