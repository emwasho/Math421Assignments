{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(ggplot2)\n",
    "library(lattice)\n",
    "library(caret)\n",
    "library(ranger)\n",
    "library(e1071)\n",
    "\n",
    "adult=read.csv(\"C:/Users/student/Documents/Bryant/Senior '18-'19/R/adult.csv\", header = FALSE)\n",
    "\n",
    "colnames(adult) <- c(\"age\", \"workclass\", \"fnlwgt\", \"education\", \"education_num\", \"marital_status\", \"occupation\", \"relationship\", \"race\", \"sex\", \"capital_gain\", \"capital_loss\", \"hours_per_week\", \"native_country\", \"salary\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##1.\tReplace all the missing values by NA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult[adult==' ?']=NA\n",
    "sum(is.na(adult))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##2.\tReplace the categorical missing values by the mode of the corresponding variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "missingval=function(x) {\n",
    "  for(i in 1:ncol(x)){\n",
    "    if(!is.numeric(x[,i])){\n",
    "      levels=unique(x[,i])\n",
    "      x[,i][is.na(x[,i])]=levels[which.max(tabulate(match(x, levels)))]\n",
    "    }\n",
    "  }\n",
    "  return(x)\n",
    "}\n",
    "adult2=missingval(adult)\n",
    "sum(is.na(adult2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##3.\tReplace the numeric missing values by the median using caret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_miss=preProcess(adult2, method='medianImpute')\n",
    "adult3=predict(num_miss, newdata = adult2)\n",
    "sum(is.na(adult3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##4.\tThe variable “native country” has 16 categories. Group the categories of this variable into 5 categories.  Do the same for all categorical variables with more than 10 categories. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult3$native_country=as.character(adult3$native_country)\n",
    "adult3$education=as.character(adult3$education)\n",
    "adult3$occupation=as.character(adult3$occupation)\n",
    "\n",
    "adult3$native_country[adult3$native_country==\" United-States\"|adult3$native_country==\" Canada\"|adult3$native_country==\" Mexico\"|adult3$native_country==\" Cuba\"|adult3$native_country==\" Dominican-Republic\"|adult3$native_country==\" El-Salvador\"|adult3$native_country==\" Guatemala\"|adult3$native_country==\" Haiti\"|adult3$native_country==\" Honduras\"|adult3$native_country==\" Jamaica\"|adult3$native_country==\" Nicaragua\"]=\"North America\"\n",
    "\n",
    "adult3$native_country[adult3$native_country==\" Cambodia\"|adult3$native_country==\" China\"|adult3$native_country==\" Hong\"|adult3$native_country==\" India\"|adult3$native_country==\" Iran\"|adult3$native_country==\" Japan\"|adult3$native_country==\" Laos\"|adult3$native_country==\" Philippines\"|adult3$native_country==\" Taiwan\"|adult3$native_country==\" Thailand\"|adult3$native_country==\" Vietnam\"]=\"Asia\"\n",
    "\n",
    "adult3$native_country[adult3$native_country==\" England\"|adult3$native_country==\" France\"|adult3$native_country==\" Germany\"|adult3$native_country==\" Greece\"|adult3$native_country==\" Holand-Netherlands\"|adult3$native_country==\" Hungary\"|adult3$native_country==\" Ireland\"|adult3$native_country==\" Italy\"|adult3$native_country==\" Poland\"|adult3$native_country==\" Portugal\"|adult3$native_country==\" Scotland\"|adult3$native_country==\" Yugoslavia\"]=\"Europe\"\n",
    "\n",
    "adult3$native_country[adult3$native_country==\" South\"|adult3$native_country==\" Outlying-US(Guam-USVI-etc)\"|adult3$native_country==\" Puerto-Rico\"]=\"Other\"\n",
    "\n",
    "adult3$native_country[adult3$native_country==\" Columbia\"|adult3$native_country==\" Ecuador\"|adult3$native_country==\" Peru\"|adult3$native_country==\" Trinadad&Tobago\"]=\"South America\"\n",
    "\n",
    "adult3$education[adult3$education==\" HS-grad\"|adult3$education==\" 12th\"|adult3$education==\" 11th\"|adult3$education==\" 10th\"|adult3$education==\" 9th\"]=\"High School\"\n",
    "\n",
    "adult3$education[adult3$education==\" Some-college\"|adult3$education==\" Assoc-acdm\"|adult3$education==\" Assoc-voc\"]=\"Some College\"\n",
    "\n",
    "adult3$education[adult3$education==\" 5th-6th\"|adult3$education==\" 7th-8th\"]=\"Middle School\"\n",
    "\n",
    "adult3$education[adult3$education==\" Preschool\"|adult3$education==\" 1st-4th\"]=\"Elementary School\"\n",
    "\n",
    "adult3$education[adult3$education==\" Bachelors\"|adult3$education==\" Masters\"|adult3$education==\" Doctorate\"|adult3$education==\" Prof-school\"]=\"College Grad\"\n",
    "\n",
    "\n",
    "adult3$occupation[adult3$occupation==\" Armed-Forces\"|adult3$occupation==\" Protective-serv\"]=\"Defence\"\n",
    "adult3$occupation[adult3$occupation==\" Craft-repair\"|adult3$occupation==\" Farming-fishing\"|adult3$occupation==\" Handlers-cleaners\"|adult3$occupation==\" Machine-op-inspct\"|adult3$occupation==\" Transport-moving\"]=\"Manual\"\n",
    "adult3$occupation[adult3$occupation==\" Adm-clerical\"|adult3$occupation==\" Exec-managerial\"|adult3$occupation==\" Sales\"|adult3$occupation==\" Tech-support\"]=\"Back Office\"\n",
    "adult3$occupation[adult3$occupation==\" Prof-specialty\"]=\"Teaching\"\n",
    "adult3$occupation[adult3$occupation==\" Other-service\"|adult3$occupation==\" Priv-house-serv\"]=\"Misc\"\n",
    "\n",
    "adult3$native_country=as.factor(adult3$native_country)\n",
    "adult3$education=as.factor(adult3$education)\n",
    "adult3$occupation=as.factor(adult3$occupation)\n",
    "\n",
    "levels(adult3$native_country)\n",
    "levels(adult3$education)\n",
    "levels(adult3$occupation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##5.Encoding categorical variable using one hot encoding (dummy encoding) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummies_model <- dummyVars(salary ~ ., data=adult)\n",
    "adultData_mat <- predict(dummies_model, newdata = adult)\n",
    "\n",
    "adultData <- data.frame(adultData_mat)\n",
    "adultData$salary <- adult$salary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##6.\tScale and center the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "preProcess_missingdata_model <- preProcess(adult3, method= c(\"center\", \"scale\"))\n",
    "preProcess_missingdata_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##7.\tSplit the data into training (70%) and testing (30%) with the seeding set to be 2018 [including the code: set.seed(2018)]. Build a decision tree and report the accuracy and balanced accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "splitIndex <- createDataPartition(adult3$salary, p = .70, list = FALSE, times = 1)\n",
    "train <- adult3[ splitIndex,]\n",
    "test <- adult3[-splitIndex,]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##8.\tBuild a random forest using the ranger package.  Report the accuracy and balanced accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(ranger)\n",
    "model = ranger(salary ~., data = train)\n",
    "pred3  = predict(model, data = test)$predictions\n",
    "cm3 = confusionMatrix(pred3, test$salary, positive=\" >50K\")\n",
    "print(cm3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##9.\tRedo 3 with missing values being replaced by the mean.  Rebuild the model and report the models’ performances (the accuracy and balanced accuracy)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3\n",
    "miss_num=function(x){\n",
    "  for (i in 1:ncol(x)){\n",
    "    if (is.numeric(x[,i])){\n",
    "      x[,i][is.na(x[,i])]=mean(x[,i], na.rm=TRUE)\n",
    "    }\n",
    "  }\n",
    "  return(x)\n",
    "}\n",
    "adult4=miss_num(adult2)\n",
    "sum(is.na(adult4))\n",
    "\n",
    "\n",
    "\n",
    "#4\n",
    "adult4$native_country=as.character(adult4$native_country)\n",
    "adult4$education=as.character(adult4$education)\n",
    "adult4$occupation=as.character(adult4$occupation)\n",
    "\n",
    "adult4$native_country[adult4$native_country==\" United-States\"|adult4$native_country==\" Canada\"|adult4$native_country==\" Mexico\"|adult4$native_country==\" Cuba\"|adult4$native_country==\" Dominican-Republic\"|adult4$native_country==\" El-Salvador\"|adult4$native_country==\" Guatemala\"|adult4$native_country==\" Haiti\"|adult4$native_country==\" Honduras\"|adult4$native_country==\" Jamaica\"|adult4$native_country==\" Nicaragua\"]=\"North America\"\n",
    "\n",
    "adult4$native_country[adult4$native_country==\" Cambodia\"|adult4$native_country==\" China\"|adult4$native_country==\" Hong\"|adult4$native_country==\" India\"|adult4$native_country==\" Iran\"|adult4$native_country==\" Japan\"|adult4$native_country==\" Laos\"|adult4$native_country==\" Philippines\"|adult4$native_country==\" Taiwan\"|adult4$native_country==\" Thailand\"|adult4$native_country==\" Vietnam\"]=\"Asia\"\n",
    "\n",
    "adult4$native_country[adult4$native_country==\" England\"|adult4$native_country==\" France\"|adult4$native_country==\" Germany\"|adult4$native_country==\" Greece\"|adult4$native_country==\" Holand-Netherlands\"|adult4$native_country==\" Hungary\"|adult4$native_country==\" Ireland\"|adult4$native_country==\" Italy\"|adult4$native_country==\" Poland\"|adult4$native_country==\" Portugal\"|adult4$native_country==\" Scotland\"|adult4$native_country==\" Yugoslavia\"]=\"Europe\"\n",
    "\n",
    "adult4$native_country[adult4$native_country==\" South\"|adult4$native_country==\" Outlying-US(Guam-USVI-etc)\"|adult4$native_country==\" Puerto-Rico\"]=\"Other\"\n",
    "\n",
    "adult4$native_country[adult4$native_country==\" Columbia\"|adult4$native_country==\" Ecuador\"|adult4$native_country==\" Peru\"|adult4$native_country==\" Trinadad&Tobago\"]=\"South America\"\n",
    "\n",
    "adult4$education[adult4$education==\" HS-grad\"|adult4$education==\" 12th\"|adult4$education==\" 11th\"|adult4$education==\" 10th\"|adult4$education==\" 9th\"]=\"High School\"\n",
    "\n",
    "adult4$education[adult4$education==\" Some-college\"|adult4$education==\" Assoc-acdm\"|adult4$education==\" Assoc-voc\"]=\"Some College\"\n",
    "\n",
    "adult4$education[adult4$education==\" 5th-6th\"|adult4$education==\" 7th-8th\"]=\"Middle School\"\n",
    "\n",
    "adult4$education[adult4$education==\" Preschool\"|adult4$education==\" 1st-4th\"]=\"Elementary School\"\n",
    "\n",
    "adult4$education[adult4$education==\" Bachelors\"|adult4$education==\" Masters\"|adult4$education==\" Doctorate\"|adult4$education==\" Prof-school\"]=\"College Grad\"\n",
    "\n",
    "\n",
    "adult4$occupation[adult4$occupation==\" Armed-Forces\"|adult4$occupation==\" Protective-serv\"]=\"Defence\"\n",
    "adult4$occupation[adult4$occupation==\" Craft-repair\"|adult4$occupation==\" Farming-fishing\"|adult4$occupation==\" Handlers-cleaners\"|adult4$occupation==\" Machine-op-inspct\"|adult4$occupation==\" Transport-moving\"]=\"Manual\"\n",
    "adult4$occupation[adult4$occupation==\" Adm-clerical\"|adult4$occupation==\" Exec-managerial\"|adult4$occupation==\" Sales\"|adult4$occupation==\" Tech-support\"]=\"Back Office\"\n",
    "adult4$occupation[adult4$occupation==\" Prof-specialty\"]=\"Teaching\"\n",
    "adult4$occupation[adult4$occupation==\" Other-service\"|adult4$occupation==\" Priv-house-serv\"]=\"Misc\"\n",
    "\n",
    "adult4$native_country=as.factor(adult4$native_country)\n",
    "adult4$education=as.factor(adult4$education)\n",
    "adult4$occupation=as.factor(adult4$occupation)\n",
    "\n",
    "levels(adult4$native_country)\n",
    "levels(adult4$education)\n",
    "levels(adult4$occupation)\n",
    "\n",
    "\n",
    "#5\n",
    "dummies_model <- dummyVars(salary ~ ., data=adult)\n",
    "adultData_mat <- predict(dummies_model, newdata = adult)\n",
    "\n",
    "adultData <- data.frame(adultData_mat)\n",
    "adultData$salary <- adult$salary\n",
    "\n",
    "\n",
    "\n",
    "#6\n",
    "preProcess_missingdata_model <- preProcess(adult4, method= c(\"center\", \"scale\"))\n",
    "preProcess_missingdata_model\n",
    "\n",
    "\n",
    "#7\n",
    "splitIndex <- createDataPartition(adult4$salary, p = .70, list = FALSE, times = 1)\n",
    "train <- adult4[ splitIndex,]\n",
    "test <- adult4[-splitIndex,]\n",
    "\n",
    "\n",
    "#8\n",
    "library(ranger)\n",
    "model = ranger(salary ~., data = train)\n",
    "pred4  = predict(model, data = test)$predictions\n",
    "cm4 = confusionMatrix(pred4, test$salary, positive=\" >50K\")\n",
    "print(cm4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##10.\tRedo 3 with missing values being replaced by the “knn” imputation method.  Rebuild the model and report the models’ performances (the accuracy and balanced accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3\n",
    "num_miss=preProcess(adult2, method='knnImpute')\n",
    "adult5=predict(num_miss, newdata = adult2)\n",
    "sum(is.na(adult5))\n",
    "\n",
    "\n",
    "#4\n",
    "adult5$native_country=as.character(adult5$native_country)\n",
    "adult5$education=as.character(adult5$education)\n",
    "adult5$occupation=as.character(adult5$occupation)\n",
    "\n",
    "adult5$native_country[adult5$native_country==\" United-States\"|adult5$native_country==\" Canada\"|adult5$native_country==\" Mexico\"|adult5$native_country==\" Cuba\"|adult5$native_country==\" Dominican-Republic\"|adult5$native_country==\" El-Salvador\"|adult5$native_country==\" Guatemala\"|adult5$native_country==\" Haiti\"|adult5$native_country==\" Honduras\"|adult5$native_country==\" Jamaica\"|adult5$native_country==\" Nicaragua\"]=\"North America\"\n",
    "\n",
    "adult5$native_country[adult5$native_country==\" Cambodia\"|adult5$native_country==\" China\"|adult5$native_country==\" Hong\"|adult5$native_country==\" India\"|adult5$native_country==\" Iran\"|adult5$native_country==\" Japan\"|adult5$native_country==\" Laos\"|adult5$native_country==\" Philippines\"|adult5$native_country==\" Taiwan\"|adult5$native_country==\" Thailand\"|adult5$native_country==\" Vietnam\"]=\"Asia\"\n",
    "\n",
    "adult5$native_country[adult5$native_country==\" England\"|adult5$native_country==\" France\"|adult5$native_country==\" Germany\"|adult5$native_country==\" Greece\"|adult5$native_country==\" Holand-Netherlands\"|adult5$native_country==\" Hungary\"|adult5$native_country==\" Ireland\"|adult5$native_country==\" Italy\"|adult5$native_country==\" Poland\"|adult5$native_country==\" Portugal\"|adult5$native_country==\" Scotland\"|adult5$native_country==\" Yugoslavia\"]=\"Europe\"\n",
    "\n",
    "adult5$native_country[adult5$native_country==\" South\"|adult5$native_country==\" Outlying-US(Guam-USVI-etc)\"|adult5$native_country==\" Puerto-Rico\"]=\"Other\"\n",
    "\n",
    "adult5$native_country[adult5$native_country==\" Columbia\"|adult5$native_country==\" Ecuador\"|adult5$native_country==\" Peru\"|adult5$native_country==\" Trinadad&Tobago\"]=\"South America\"\n",
    "\n",
    "adult5$education[adult5$education==\" HS-grad\"|adult5$education==\" 12th\"|adult5$education==\" 11th\"|adult5$education==\" 10th\"|adult5$education==\" 9th\"]=\"High School\"\n",
    "\n",
    "adult5$education[adult5$education==\" Some-college\"|adult5$education==\" Assoc-acdm\"|adult5$education==\" Assoc-voc\"]=\"Some College\"\n",
    "\n",
    "adult5$education[adult5$education==\" 5th-6th\"|adult5$education==\" 7th-8th\"]=\"Middle School\"\n",
    "\n",
    "adult5$education[adult5$education==\" Preschool\"|adult5$education==\" 1st-4th\"]=\"Elementary School\"\n",
    "\n",
    "adult5$education[adult5$education==\" Bachelors\"|adult5$education==\" Masters\"|adult5$education==\" Doctorate\"|adult5$education==\" Prof-school\"]=\"College Grad\"\n",
    "\n",
    "\n",
    "adult5$occupation[adult5$occupation==\" Armed-Forces\"|adult5$occupation==\" Protective-serv\"]=\"Defence\"\n",
    "adult5$occupation[adult5$occupation==\" Craft-repair\"|adult5$occupation==\" Farming-fishing\"|adult5$occupation==\" Handlers-cleaners\"|adult5$occupation==\" Machine-op-inspct\"|adult5$occupation==\" Transport-moving\"]=\"Manual\"\n",
    "adult5$occupation[adult5$occupation==\" Adm-clerical\"|adult5$occupation==\" Exec-managerial\"|adult5$occupation==\" Sales\"|adult5$occupation==\" Tech-support\"]=\"Back Office\"\n",
    "adult5$occupation[adult5$occupation==\" Prof-specialty\"]=\"Teaching\"\n",
    "adult5$occupation[adult5$occupation==\" Other-service\"|adult5$occupation==\" Priv-house-serv\"]=\"Misc\"\n",
    "\n",
    "adult5$native_country=as.factor(adult5$native_country)\n",
    "adult5$education=as.factor(adult5$education)\n",
    "adult5$occupation=as.factor(adult5$occupation)\n",
    "\n",
    "levels(adult5$native_country)\n",
    "levels(adult5$education)\n",
    "levels(adult5$occupation)\n",
    "\n",
    "\n",
    "#5\n",
    "dummies_model <- dummyVars(salary ~ ., data=adult5)\n",
    "adult5Data_mat <- predict(dummies_model, newdata = adult5)\n",
    "\n",
    "adult5Data <- data.frame(adult5Data_mat)\n",
    "adult5Data$salary <- adult5$salary\n",
    "\n",
    "\n",
    "#6\n",
    "preProcess_missingdata_model <- preProcess(adult5, method= c(\"center\", \"scale\"))\n",
    "preProcess_missingdata_model\n",
    "\n",
    "#7\n",
    "splitIndex <- createDataPartition(adult5$salary, p = .70, list = FALSE, times = 1)\n",
    "train <- adult5[ splitIndex,]\n",
    "test <- adult5[-splitIndex,]\n",
    "\n",
    "\n",
    "#8\n",
    "library(ranger)\n",
    "model = ranger(salary ~., data = train)\n",
    "pred5  = predict(model, data = test)$predictions\n",
    "cm5 = confusionMatrix(pred5, test$salary, positive=\" >50K\")\n",
    "print(cm5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##11.\tRedo 6 with only scaling and centering the non-encoded variables. Rebuild the model and report the models’ performances (the accuracy and balanced accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_miss=preProcess(adult2, method='medianImpute')\n",
    "adult9=predict(num_miss, newdata = adult2)\n",
    "sum(is.na(adult9))\n",
    "\n",
    "\n",
    "adult9$native_country=as.character(adult9$native_country)\n",
    "adult9$education=as.character(adult9$education)\n",
    "adult9$occupation=as.character(adult9$occupation)\n",
    "\n",
    "adult9$native_country[adult9$native_country==\" United-States\"|adult9$native_country==\" Canada\"|adult9$native_country==\" Mexico\"|adult9$native_country==\" Cuba\"|adult9$native_country==\" Dominican-Republic\"|adult9$native_country==\" El-Salvador\"|adult9$native_country==\" Guatemala\"|adult9$native_country==\" Haiti\"|adult9$native_country==\" Honduras\"|adult9$native_country==\" Jamaica\"|adult9$native_country==\" Nicaragua\"]=\"North America\"\n",
    "\n",
    "adult9$native_country[adult9$native_country==\" Cambodia\"|adult9$native_country==\" China\"|adult9$native_country==\" Hong\"|adult9$native_country==\" India\"|adult9$native_country==\" Iran\"|adult9$native_country==\" Japan\"|adult9$native_country==\" Laos\"|adult9$native_country==\" Philippines\"|adult9$native_country==\" Taiwan\"|adult9$native_country==\" Thailand\"|adult9$native_country==\" Vietnam\"]=\"Asia\"\n",
    "\n",
    "adult9$native_country[adult9$native_country==\" England\"|adult9$native_country==\" France\"|adult9$native_country==\" Germany\"|adult9$native_country==\" Greece\"|adult9$native_country==\" Holand-Netherlands\"|adult9$native_country==\" Hungary\"|adult9$native_country==\" Ireland\"|adult9$native_country==\" Italy\"|adult9$native_country==\" Poland\"|adult9$native_country==\" Portugal\"|adult9$native_country==\" Scotland\"|adult9$native_country==\" Yugoslavia\"]=\"Europe\"\n",
    "\n",
    "adult9$native_country[adult9$native_country==\" South\"|adult9$native_country==\" Outlying-US(Guam-USVI-etc)\"|adult9$native_country==\" Puerto-Rico\"]=\"Other\"\n",
    "\n",
    "adult9$native_country[adult9$native_country==\" Columbia\"|adult9$native_country==\" Ecuador\"|adult9$native_country==\" Peru\"|adult9$native_country==\" Trinadad&Tobago\"]=\"South America\"\n",
    "\n",
    "adult9$education[adult9$education==\" HS-grad\"|adult9$education==\" 12th\"|adult9$education==\" 11th\"|adult9$education==\" 10th\"|adult9$education==\" 9th\"]=\"High School\"\n",
    "\n",
    "adult9$education[adult9$education==\" Some-college\"|adult9$education==\" Assoc-acdm\"|adult9$education==\" Assoc-voc\"]=\"Some College\"\n",
    "\n",
    "adult9$education[adult9$education==\" 9th-6th\"|adult9$education==\" 7th-8th\"]=\"Middle School\"\n",
    "\n",
    "adult9$education[adult9$education==\" Preschool\"|adult9$education==\" 1st-4th\"]=\"Elementary School\"\n",
    "\n",
    "adult9$education[adult9$education==\" Bachelors\"|adult9$education==\" Masters\"|adult9$education==\" Doctorate\"|adult9$education==\" Prof-school\"]=\"College Grad\"\n",
    "\n",
    "\n",
    "adult9$occupation[adult9$occupation==\" Armed-Forces\"|adult9$occupation==\" Protective-serv\"]=\"Defence\"\n",
    "adult9$occupation[adult9$occupation==\" Craft-repair\"|adult9$occupation==\" Farming-fishing\"|adult9$occupation==\" Handlers-cleaners\"|adult9$occupation==\" Machine-op-inspct\"|adult9$occupation==\" Transport-moving\"]=\"Manual\"\n",
    "adult9$occupation[adult9$occupation==\" Adm-clerical\"|adult9$occupation==\" Exec-managerial\"|adult9$occupation==\" Sales\"|adult9$occupation==\" Tech-support\"]=\"Back Office\"\n",
    "adult9$occupation[adult9$occupation==\" Prof-specialty\"]=\"Teaching\"\n",
    "adult9$occupation[adult9$occupation==\" Other-service\"|adult9$occupation==\" Priv-house-serv\"]=\"Misc\"\n",
    "\n",
    "adult9$native_country=as.factor(adult9$native_country)\n",
    "adult9$education=as.factor(adult9$education)\n",
    "adult9$occupation=as.factor(adult9$occupation)\n",
    "\n",
    "levels(adult9$native_country)\n",
    "levels(adult9$education)\n",
    "levels(adult9$occupation)\n",
    "\n",
    "dummies_model <- dummyVars(salary ~ ., data = adult9)\n",
    "trainData_mat <- predict(dummies_model, newdata = adult9)\n",
    "\n",
    "trainData <- data.frame(trainData_mat)\n",
    "trainData$salary <- adult9$salary\n",
    "\n",
    "\n",
    "numdf <- c()\n",
    "catdf <- c()\n",
    "  for(i in 1:ncol(trainData)) {\n",
    "    if(is.numeric(trainData[,i])) {\n",
    "      numdf <- c(numdf, names(trainData)[i])\n",
    "    }\n",
    "    else {\n",
    "      catdf <- c(catdf, names(trainData)[i])\n",
    "    }\n",
    "  }\n",
    "  numdata <- trainData[numdf]\n",
    "  catdata <- trainData[catdf]\n",
    "\n",
    "\n",
    "trainData2 <- preProcess(numdata, method= c(\"center\", \"scale\"))\n",
    "trainData2\n",
    "\n",
    "\n",
    "#7\n",
    "names(adult9)[15] = \"salary\"\n",
    "set.seed(2018)\n",
    "splitIndex <- createDataPartition(adult9$salary, p = .70, list = FALSE, times = 1)\n",
    "train <- adult9[ splitIndex,]\n",
    "test <- adult9[-splitIndex,]\n",
    "\n",
    "\n",
    "\n",
    "#8\n",
    "library(ranger)\n",
    "model = ranger(salary ~., data = train)\n",
    "pred10  = predict(model, data = test)$predictions\n",
    "cm10 = confusionMatrix(pred10, test$salary, positive=\" >50K\")\n",
    "print(cm10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##12.\tRedo 5 with a different encoding method. Rebuild the model and report the models’ performances (the accuracy and balanced accuracy). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult$workclass = as.numeric(adult$workclass)\n",
    "adult$education = as.numeric(adult$education)\n",
    "adult$marital_status = as.numeric(adult$marital_status)\n",
    "adult$occupation = as.numeric(adult$occupation)\n",
    "adult$relationship = as.numeric(adult$relationship)\n",
    "adult$race = as.numeric(adult$race)\n",
    "adult$sex = as.numeric(adult$sex)\n",
    "adult$native_country = as.numeric(adult$native_country)\n",
    "\n",
    "#1\n",
    "adult[adult==' ?']=NA\n",
    "sum(is.na(adult))\n",
    "\n",
    "#2\n",
    "missingval=function(x) {\n",
    "  for(i in 1:ncol(x)){\n",
    "    if(!is.numeric(x[,i])){\n",
    "      levels=unique(x[,i])\n",
    "      x[,i][is.na(x[,i])]=levels[which.max(tabulate(match(x, levels)))]\n",
    "    }\n",
    "  }\n",
    "  return(x)\n",
    "}\n",
    "adult2=missingval(adult)\n",
    "sum(is.na(adult2))\n",
    "\n",
    "#3\n",
    "num_miss=preProcess(adult2, method='medianImpute')\n",
    "adult8=predict(num_miss, newdata = adult2)\n",
    "sum(is.na(adult8))\n",
    "\n",
    "#5\n",
    "\n",
    "dummies_model <- dummyVars(salary ~ ., data=adult)\n",
    "adultData_mat <- predict(dummies_model, newdata = adult)\n",
    "\n",
    "adultData <- data.frame(adultData_mat)\n",
    "adultData$salary <- adult$salary\n",
    "\n",
    "#6\n",
    "preProcess_missingdata_model <- preProcess(adult8, method= c(\"center\", \"scale\"))\n",
    "preProcess_missingdata_model\n",
    "\n",
    "#7\n",
    "splitIndex <- createDataPartition(adult8$salary, p = .70, list = FALSE, times = 1)\n",
    "train <- adult8[ splitIndex,]\n",
    "test <- adult8[-splitIndex,]\n",
    "\n",
    "\n",
    "#8\n",
    "library(ranger)\n",
    "model = ranger(salary ~., data = train)\n",
    "pred8  = predict(model, data = test)$predictions\n",
    "cm8 = confusionMatrix(pred8, test$salary, positive=\" >50K\")\n",
    "print(cm8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##13.\tSkip 4 to rebuild the models.  Do you find any improvement in the models’ performances?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "adult[adult==' ?']=NA\n",
    "sum(is.na(adult))\n",
    "\n",
    "#2\n",
    "missingval=function(x) {\n",
    "  for(i in 1:ncol(x)){\n",
    "    if(!is.numeric(x[,i])){\n",
    "      levels=unique(x[,i])\n",
    "      x[,i][is.na(x[,i])]=levels[which.max(tabulate(match(x, levels)))]\n",
    "    }\n",
    "  }\n",
    "  return(x)\n",
    "}\n",
    "adult2=missingval(adult)\n",
    "sum(is.na(adult2))\n",
    "\n",
    "#3\n",
    "num_miss=preProcess(adult2, method='medianImpute')\n",
    "adult6=predict(num_miss, newdata = adult2)\n",
    "sum(is.na(adult6))\n",
    "\n",
    "#5\n",
    "dummies_model <- dummyVars(salary ~ ., data=adult6)\n",
    "adult6Data_mat <- predict(dummies_model, newdata = adult6)\n",
    "\n",
    "adult6Data <- data.frame(adult6Data_mat)\n",
    "adult6Data$salary <- adult6$salary\n",
    "\n",
    "\n",
    "#6\n",
    "preProcess_missingdata_model <- preProcess(adult6, method= c(\"center\", \"scale\"))\n",
    "preProcess_missingdata_model\n",
    "\n",
    "#7\n",
    "splitIndex <- createDataPartition(adult6$salary, p = .70, list = FALSE, times = 1)\n",
    "train <- adult6[ splitIndex,]\n",
    "test <- adult6[-splitIndex,]\n",
    "\n",
    "\n",
    "#8\n",
    "library(ranger)\n",
    "model = ranger(salary ~., data = train)\n",
    "pred6  = predict(model, data = test)$predictions\n",
    "cm6 = confusionMatrix(pred6, test$salary, positive=\" >50K\")\n",
    "print(cm6)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
