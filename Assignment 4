{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##1. Write a function: input a number x and return x^2 + 3x +1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_one <- function(x) {\n",
    "  x <- (x^2+3*x+1)\n",
    "  return(x)\n",
    "}\n",
    "question_one(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##2. Write a function: input a vector and return the product of all the entries in the vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_two <- function(x) {\n",
    "  prod(x)\n",
    "}\n",
    "  q2 <- c(1,2,3,4,5,6)\n",
    "  question_two(q2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##3.\tWrite a function: input a vector v and a number n and return a vector with its missing data being replaced by n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_three <- function(v,n) {\n",
    "  v[is.na(v)] <- n\n",
    "  return(v)\n",
    "}\n",
    "\n",
    "q3 <- c(1, NA, 3)\n",
    "question_three(q3,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##4.  Write a function: input a numeric vector and return a vector with its missing data being replaced by the mean of the vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_four <- function(x) {\n",
    "  avg <- mean(x, na.rm = TRUE)\n",
    "  x[is.na(x)] <- avg\n",
    "  return(x)\n",
    "}\n",
    "q4 <- c(6, NA, 1)\n",
    "question_four(q4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##5. Write a function: input a data frame and return a data frame with numeric missing values being replaced by the mean of the corresponding column.  Check your function on the titanic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "titanic=read.csv(\"C:/Users/student/Documents/Bryant/Senior '18-'19/R/titanic.csv\")\n",
    "titanic$Survived = factor(titanic$Survived)\n",
    "titanic$Pclass = factor(titanic$Pclass)\n",
    "titanic$Sex = factor(titanic$Sex)\n",
    "\n",
    "\n",
    "question_five <- function(q5) {\n",
    "  varcount <- ncol(q5)\n",
    "  for (i in 1:varcount) {\n",
    "      if(is.numeric(q5[[i]]) == TRUE) {\n",
    "         q5[[i]][is.na(q5[[i]])] <- mean(q5[[i]], na.rm = TRUE)\n",
    "      }\n",
    "  }\n",
    "  return(d5)\n",
    "}\n",
    "sample\n",
    "question_five(titanic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##6. Write a function that plots a bar chart of an input categorical variable.  Check your function on the titanic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_six <- function(q6, var1) {\n",
    "    library(ggplot2)\n",
    "    td = ggplot(data = q6) + geom_bar(mapping = aes(x = q6[,var1]))\n",
    "  return(td)\n",
    "}\n",
    "question_six(titanic, 2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##7. Write a function that plots bar chart of two input categorical variables.  Check your function on the titanic data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_seven <- function(q7, var1, var2) {\n",
    "    library(ggplot2)\n",
    "    td = ggplot(data = q7) + geom_bar(mapping = aes(x = q7[,var1], fill =\n",
    "      q7[,var2]), position = \"dodge\")\n",
    "    return(td)\n",
    "}\n",
    "question_seven(titanic, 4, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
