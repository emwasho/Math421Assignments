{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Emma Washo Final Paper\n",
    "Emma Washo\n",
    "December 19, 2018\n",
    "Introduction\n",
    "Problem\n",
    "The purpose of this project is to use satisfaction feedback data collected from passengers on a US airline to find which aspects they find the most enjoyable. This data is important to know because it could help airlines increase sales. There are other works done on airline satisfaction. Researchgate, NYC data science, and white rose are three examples of others working on the same problem.\n",
    "Introduction to variables\n",
    "The data for this project came from kaggle. The data came from a collection of surveys given to clients after their trip with the airline. The target variable for this project is satisfaction. This variable is broken into satisfied and neutral/dissatisfied. The variables for the data are iD, Satisfaction, Type of Travel, Class, Flight Distance, Seat comfort, Departure/Arrival time convenient, Food and drink, Gate location, Inflight wifi service, Inflight entertainment, Online support, Ease of Online booking, On-board service, Leg room service, Baggage handling, Checkin service, Cleanliness, Online boarding, Departure Delay in Minutes, and Arrival Delay in Minutes. The data contains 129,880 observations and 23 variables. Satisfaction is the airline satisfaction level, broken into satisfied and neutral or dissatisfied. Age is the actual age of the passengers. Gender is the gender of the passengers broken up into male and female. Type of tral is the purpose of the flight of the passengers, broken into personal travel and business travel. Class is the travel class in the plane of the passengers broken into business, eco, and eco plus. Flight Distance is the flight distance of the journey. Seat comfort is based on the satifcation of the seat. Departure and Arrival time convenient is based on the satisfaction of the arrival and departure time. Food and drink is the satisfaction of the food and drink provided on the flight. Gate location is the level of satisfaction of the gate location. Inflight wifi service is the satisfaction level of the inflight wifi service, which is scaled from 0 to 5, 0 being not applicable. Inflight entertainment is the satisfaction of the inflight entertainment. Online support is the satisfaction level of online support. Ease of Online booking is the satisfaction level of online booking. On-board service is the satisfaction level of the on-board process. Leg room service is the satifaction with the leg room in their seated area. Baggage handling is the level of satisfaction with the baggage handling. Checkin service is the level of satisfaction of the check-in service. Cleanliness refers to the cleanliness of the plane. Online boarding refers to the ease of online boarding. Departure Delay in Minutes is the amount of minutes the departure was delayed. Arrival Delay in Minutes is the amount of minutes the arrival was delayed.\n",
    "Load Packages\n",
    "Load all packages into R. The packages required were ggplot2, lattice, caret, and RANN\n",
    "library(ggplot2)\n",
    "## Warning: package 'ggplot2' was built under R version 3.5.1\n",
    "library(lattice)\n",
    "## Warning: package 'lattice' was built under R version 3.5.1\n",
    "library(caret)\n",
    "## Warning: package 'caret' was built under R version 3.5.1\n",
    "library(RANN)\n",
    "## Warning: package 'RANN' was built under R version 3.5.1\n",
    "Read and Prepare Data for Imputation\n",
    "The following steps read and import the flight satisfaction data saved as “Final_Data”. Assign the data to the name “satisfaction”. This step also corrects the data. The variable iD was set to NULL. The colnames in rows 1, 3, 5, 22, and 23 were changed.\n",
    "satisfaction = read.csv(\"C:/Users/student/Documents/Bryant/Senior '18-'19/R/Final_Data.csv\")\n",
    "\n",
    "for(x in 1:ncol(satisfaction)) {\n",
    "  colnames(satisfaction)[x] <- tolower(colnames(satisfaction)[x])\n",
    "}\n",
    "\n",
    "satisfaction$id <- NULL\n",
    "colnames(satisfaction)[1] <- \"target\"\n",
    "colnames(satisfaction)[3] <- \"customertype\"\n",
    "colnames(satisfaction)[5] <- \"traveltype\"\n",
    "colnames(satisfaction)[22] <- \"departdelay\"\n",
    "colnames(satisfaction)[23] <- \"arrivaldelay\"\n",
    "Data Visualization\n",
    "Graph of Density of Flight Distance\n",
    "This is a single variable density graph. This graph uses the variable flight distance.\n",
    "#Single Variable\n",
    "ggplot(data = satisfaction) + geom_density(mapping = aes(x = flight.distance)) + ggtitle(\"Density of Flight Distance\")\n",
    " \n",
    "Graph of Count of Target\n",
    "This is a single variable graph, the variable used for this graph was the target: satisfaction. It is a bar graph of the count.\n",
    "#Single Variable\n",
    "ggplot(data = satisfaction) + geom_bar(mapping = aes(x = target)) + ggtitle(\"Count of Target\")\n",
    " \n",
    "Graph of Satisfaction by Travel Class\n",
    "This is a two variable bar graph, showing both the satisfaction and class.\n",
    "#Two Variables\n",
    "ggplot(data = satisfaction) + geom_bar(mapping = aes(x = class, fill = target), position = \"dodge\")  + ggtitle(\"Satisfaction by Travel Class\")\n",
    " \n",
    "Graph of Histogram of Satisfaction by Age\n",
    "This is a two variable histogram, using age and satisfaction.\n",
    "#Two Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 5, mapping = aes(x = age, fill = target), position = \"dodge\")  + ggtitle(\"Histogram of Satisfaction by Age\")\n",
    " \n",
    "Graph of Level of Seat Comfort by Gender\n",
    "This is a two variable bar graph using the variables seat comfort and gender.\n",
    "#Two Variables\n",
    "ggplot(data = satisfaction) + geom_bar(mapping = aes(x = seat.comfort, fill = gender), position = \"dodge\") + ggtitle(\"Level of Seat Comfort by Gender\")\n",
    " \n",
    "Graph of Satisfaction by Gender\n",
    "This is bar graph using two variables: satisfaction and gender.\n",
    "#Two Variables\n",
    "ggplot(data = satisfaction) + geom_bar(mapping = aes(x = target, fill = gender), position = \"dodge\")+ ggtitle(\"Satisfaction by Gender\")\n",
    " \n",
    "Graph of Satisfaction by Travel Type\n",
    "This is a two variable bar graph using travel type and satisfaction.\n",
    "ggplot(data = satisfaction) + geom_bar(mapping = aes(x = traveltype, fill = target), position = \"dodge\")+ ggtitle(\"Satisfaction by Travel Type\")\n",
    " \n",
    "Graph of Satisfaction by Customer Type\n",
    "This is a two variable bar graph showing customer type and satisfaction.\n",
    "#Two Variables\n",
    "ggplot(data = satisfaction) + geom_bar(mapping = aes(x = customertype, fill = target), position = \"dodge\") + ggtitle(\"Satisfaction by Customer Type\")\n",
    " \n",
    "Graph of Density of Flight Distance by Satisfaction\n",
    "This is a two variables density graph using the flight distance and satisfaction.\n",
    "#Two Variables\n",
    "ggplot(data = satisfaction) + geom_density(mapping = aes(x = flight.distance, fill = target), position = \"dodge\") + ggtitle(\"Density of Flight Distance by Satisfaction\") \n",
    "## Warning: Width not defined. Set with `position_dodge(width = ?)`\n",
    " \n",
    "Graph of Satisfaction by Ease of Gate Location Relative to Class Flied\n",
    "This is a three variale histogram of satisfaction by Ease of Gate Location Relative to Class Flied.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = gate.location, fill = target), position = \"dodge\") + facet_wrap(~class) + ggtitle(\"Satisfaction by Ease of Gate Location Relative to Class Flied\") \n",
    " \n",
    "Graph of Satisfaction by Gender and Quality of Seat Comfort\n",
    "This is a three variable histogram graphing satisfaction by gender and quality of seat comfort.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = seat.comfort, fill = target), position = \"dodge\") + facet_wrap(~gender) + ggtitle(\"Satisfaction by Gender and Quality of Seat Comfort\")\n",
    " \n",
    "Graph of Satisfaction by Gender and Quality of Food and Drink\n",
    "This is a three variable histogram of satisfaction by gender and quality of food and drink.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = food.and.drink, fill = target), position = \"dodge\") + facet_wrap(~gender) + ggtitle(\"Satisfaction by Gender and Quality of Food and Drink\")\n",
    " \n",
    "Graph of Satisfaction by Gender and Quality of WiFi\n",
    "This is a three variable histogram of satisfaction by gender and quality of wifi.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = inflight.wifi.service, fill = target), position = \"dodge\") + facet_wrap(~gender) + ggtitle(\"Satisfaction by Gender and Quality of WiFi\")\n",
    " \n",
    "Graph of Satisfaction by Gender and Cleanliness\n",
    "This is a three variable histogram comparing satisfaction by gender and cleanliness.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = cleanliness, fill = target), position = \"dodge\") + facet_wrap(~gender)  + ggtitle(\"Satisfaction by Gender and Cleanliness\") \n",
    " \n",
    "Graph of Satisfaction by Quality of Entertainment Relative to Loyalty\n",
    "This is a three variable histogram of satisfaction by quality of entertainment relative to loyalty.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = inflight.entertainment, fill = target), position = \"dodge\") + facet_wrap(~customertype)  + ggtitle(\"Satisfaction by Quality of Entertainment Relative to Loyalty\") \n",
    " \n",
    "Graph of Satisfaction by Baggage Handling Relative to Type of Travel\n",
    "This is a three variable histogram graphing satisfaction by baggage handling and type of travel.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = baggage.handling, fill = target), position = \"dodge\") + facet_wrap(~traveltype)  + ggtitle(\"Satisfaction by Baggage Handling Relative to Type of Travel\") \n",
    " \n",
    "Graph of Satisfaction by Gender and Quality of Leg Room\n",
    "This is a three variable histogram of satisfaction by gender and quality.\n",
    "#Three Variables\n",
    "ggplot(data = satisfaction) + geom_histogram(binwidth = 1, mapping = aes(x = leg.room.service, fill = target), position = \"dodge\") + facet_wrap(~gender)  + ggtitle(\"Satisfaction by Gender and Quality of Leg Room\") \n",
    " \n",
    "Factor Variables\n",
    "This step is turning the variables from integers into factors. After this step, the variables age, flight distance, depart delay, and arrival delay are the only remaining variables. The rest of the variables are factors.\n",
    "satisfaction$seat.comfort = as.factor(satisfaction$seat.comfort)\n",
    "satisfaction$departure.arrival.time.convenient = as.factor(satisfaction$departure.arrival.time.convenient)\n",
    "satisfaction$food.and.drink  = as.factor(satisfaction$food.and.drink)\n",
    "satisfaction$gate.location = as.factor(satisfaction$gate.location)\n",
    "satisfaction$inflight.wifi.service = as.factor(satisfaction$inflight.wifi.service)\n",
    "satisfaction$inflight.entertainment = as.factor(satisfaction$inflight.entertainment)\n",
    "satisfaction$online.support = as.factor(satisfaction$online.support)\n",
    "satisfaction$ease.of.online.booking = as.factor(satisfaction$ease.of.online.booking)\n",
    "satisfaction$on.board.service  = as.factor(satisfaction$on.board.service)\n",
    "satisfaction$leg.room.service  = as.factor(satisfaction$leg.room.service)\n",
    "satisfaction$baggage.handling  = as.factor(satisfaction$baggage.handling)\n",
    "satisfaction$checkin.service  = as.factor(satisfaction$checkin.service)\n",
    "satisfaction$cleanliness  = as.factor(satisfaction$cleanliness)\n",
    "satisfaction$online.boarding  = as.factor(satisfaction$online.boarding)\n",
    "\n",
    "str(satisfaction)\n",
    "## 'data.frame':    129880 obs. of  23 variables:\n",
    "##  $ target                           : Factor w/ 2 levels \"neutral or dissatisfied\",..: 2 2 2 2 2 2 2 2 2 2 ...\n",
    "##  $ gender                           : Factor w/ 2 levels \"Female\",\"Male\": 1 2 1 1 1 2 1 2 1 2 ...\n",
    "##  $ customertype                     : Factor w/ 2 levels \"disloyal Customer\",..: 2 2 2 2 2 2 2 2 2 2 ...\n",
    "##  $ age                              : int  65 47 15 60 70 30 66 10 56 22 ...\n",
    "##  $ traveltype                       : Factor w/ 2 levels \"Business travel\",..: 2 2 2 2 2 2 2 2 2 2 ...\n",
    "##  $ class                            : Factor w/ 3 levels \"Business\",\"Eco\",..: 2 1 2 2 2 2 2 2 1 2 ...\n",
    "##  $ flight.distance                  : int  265 2464 2138 623 354 1894 227 1812 73 1556 ...\n",
    "##  $ seat.comfort                     : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 1 1 1 1 1 1 1 1 1 1 ...\n",
    "##  $ departure.arrival.time.convenient: Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 1 1 1 1 1 1 1 1 1 1 ...\n",
    "##  $ food.and.drink                   : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 1 1 1 1 1 1 1 1 1 1 ...\n",
    "##  $ gate.location                    : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 3 4 4 4 4 4 4 4 4 4 ...\n",
    "##  $ inflight.wifi.service            : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 3 1 3 4 5 3 3 3 6 3 ...\n",
    "##  $ inflight.entertainment           : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 5 3 1 5 4 1 6 1 4 1 ...\n",
    "##  $ online.support                   : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 3 3 3 4 5 3 6 3 6 3 ...\n",
    "##  $ ease.of.online.booking           : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 4 4 3 2 3 3 6 3 5 3 ...\n",
    "##  $ on.board.service                 : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 4 5 4 2 3 6 6 4 5 3 ...\n",
    "##  $ leg.room.service                 : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 1 5 4 1 1 5 1 4 1 5 ...\n",
    "##  $ baggage.handling                 : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 3 4 4 1 2 5 5 4 1 5 ...\n",
    "##  $ checkin.service                  : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 6 3 5 5 5 6 6 6 6 4 ...\n",
    "##  $ cleanliness                      : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 4 4 5 2 3 5 6 5 5 5 ...\n",
    "##  $ online.boarding                  : Factor w/ 6 levels \"0\",\"1\",\"2\",\"3\",..: 3 3 3 4 6 3 4 3 5 3 ...\n",
    "##  $ departdelay                      : int  0 310 0 0 0 0 17 0 0 30 ...\n",
    "##  $ arrivaldelay                     : int  0 305 0 0 0 0 15 0 0 26 ...\n",
    "Imput missing values\n",
    "There are three different methods implemented on handling missing values. The first method is using the median of the data to replace the missing variables. The function ‘medianImpute’ was used. The median is the middle number within the data already there. The second method used to replace the missing values is bagging. The function used is ‘bagImpute’. Bagging is used to improve the stability and accuracy by avoiding overfitting and reducing variance. The third method used to replace variables was nearest neighbor method. The function ‘knnImput’ was used for this step. The nearest neighbor method is a method used to find the closest value to a given point. All three models produce zero missing values once run, which is the goal.\n",
    "preProcess_med <- preProcess(satisfaction, method = 'medianImpute')\n",
    "MedData <- predict(preProcess_med, newdata = satisfaction)\n",
    "sum(is.na(MedData))\n",
    "## [1] 0\n",
    "preProcess_bag <- preProcess(satisfaction, method = 'bagImpute')\n",
    "BagData <- predict(preProcess_bag, newdata = satisfaction)\n",
    "sum(is.na(BagData))\n",
    "## [1] 0\n",
    "preProcess_knn <- preProcess(satisfaction, method = 'knnImpute')\n",
    "KnnData <- predict(preProcess_knn, newdata = satisfaction)\n",
    "sum(is.na(KnnData))\n",
    "## [1] 0\n",
    "Decision Trees on Imputation Methods\n",
    "After testing all three different methods used to replace missing variables, the Median function provided the best accuracy. The median data will be used going forward throughout the rest of the project. This was based upon the three tests. The accuracy for the MedData was 0.8284416. The accuracy for the bagging process was 0.8240221. The accuracy for the nearest neighbor method was 0.8276571 \n",
    "imputedt1 <- train(target ~.,data = MedData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter =  TRUE))\n",
    "## + Fold1: cp=0.01356 \n",
    "## - Fold1: cp=0.01356 \n",
    "## + Fold2: cp=0.01356 \n",
    "## - Fold2: cp=0.01356 \n",
    "## + Fold3: cp=0.01356 \n",
    "## - Fold3: cp=0.01356 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting cp = 0.0136 on full training set\n",
    "imputedt2 <- train(target ~.,data = KnnData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter =  TRUE))\n",
    "## + Fold1: cp=0.01356 \n",
    "## - Fold1: cp=0.01356 \n",
    "## + Fold2: cp=0.01356 \n",
    "## - Fold2: cp=0.01356 \n",
    "## + Fold3: cp=0.01356 \n",
    "## - Fold3: cp=0.01356 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting cp = 0.0136 on full training set\n",
    "imputedt3 <- train(target ~.,data = BagData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter =  TRUE))\n",
    "## + Fold1: cp=0.01356 \n",
    "## - Fold1: cp=0.01356 \n",
    "## + Fold2: cp=0.01356 \n",
    "## - Fold2: cp=0.01356 \n",
    "## + Fold3: cp=0.01356 \n",
    "## - Fold3: cp=0.01356 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting cp = 0.0136 on full training set\n",
    "imputedt1\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86587, 86586, 86587 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   cp          Accuracy   Kappa    \n",
    "##   0.01355604  0.8284416  0.6549875\n",
    "##   0.04092324  0.8081614  0.6120720\n",
    "##   0.28147909  0.6315124  0.1986258\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final value used for the model was cp = 0.01355604.\n",
    "imputedt2\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86586, 86586, 86588 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   cp          Accuracy   Kappa    \n",
    "##   0.01355604  0.8240221  0.6446166\n",
    "##   0.04092324  0.8080843  0.6119186\n",
    "##   0.28147909  0.6314046  0.1983891\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final value used for the model was cp = 0.01355604.\n",
    "imputedt3\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86588, 86586, 86586 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   cp          Accuracy   Kappa    \n",
    "##   0.01355604  0.8276571  0.6544372\n",
    "##   0.04092324  0.8082152  0.6121653\n",
    "##   0.28147909  0.6316741  0.1988758\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final value used for the model was cp = 0.01355604.\n",
    "Recode Categorical Variables\n",
    "This step is recoding the categorical variables into bad, medium, and good. The purpose of this step is the reduce the data set, improve accuracy, and improve efficiency of the model. The two encoding methods used were decision tree and decision tree encoded. The second encoding method lowered the cp and increased the accuracy compared to the first encoded model.\n",
    "encodeMedData <- MedData\n",
    "levels(encodeMedData$seat.comfort) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$departure.arrival.time.convenient) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$food.and.drink) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$gate.location) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$inflight.wifi.service) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$inflight.entertainment) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$online.support) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$ease.of.online.booking) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$on.board.service) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$leg.room.service) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$baggage.handling) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$checkin.service) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$cleanliness) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "levels(encodeMedData$online.boarding) = c(\"bad\",\"bad\",\"medium\",\"medium\",\"good\",\"good\")\n",
    "\n",
    "set.seed(41)\n",
    "\n",
    "#Decision Tree \n",
    "encodedt1 <- train(target ~.,data = MedData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter =  TRUE))\n",
    "## + Fold1: cp=0.01356 \n",
    "## - Fold1: cp=0.01356 \n",
    "## + Fold2: cp=0.01356 \n",
    "## - Fold2: cp=0.01356 \n",
    "## + Fold3: cp=0.01356 \n",
    "## - Fold3: cp=0.01356 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting cp = 0.0136 on full training set\n",
    "set.seed(41)\n",
    "\n",
    "#Decision Tree Encoded\n",
    "encodedt2 <- train(target ~.,data = encodeMedData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter =  TRUE))\n",
    "## + Fold1: cp=0.008692 \n",
    "## - Fold1: cp=0.008692 \n",
    "## + Fold2: cp=0.008692 \n",
    "## - Fold2: cp=0.008692 \n",
    "## + Fold3: cp=0.008692 \n",
    "## - Fold3: cp=0.008692 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting cp = 0.00869 on full training set\n",
    "encodedt1\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86587, 86586, 86587 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   cp          Accuracy   Kappa    \n",
    "##   0.01355604  0.8278103  0.6531550\n",
    "##   0.04092324  0.8081922  0.6121210\n",
    "##   0.28147909  0.6314066  0.1983979\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final value used for the model was cp = 0.01355604.\n",
    "encodedt2\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86587, 86586, 86587 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   cp           Accuracy   Kappa    \n",
    "##   0.008691511  0.8295889  0.6524899\n",
    "##   0.052098039  0.8094549  0.6138198\n",
    "##   0.562958175  0.6314066  0.1983979\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final value used for the model was cp = 0.008691511.\n",
    "Predictive Models\n",
    "The four models used for this project were a decision tree, glmnet, random forest, and neural network. The decision tree produced accuracies of 0.8295889 and 0.8605483. The glmnet’s produced accuracies of 0.8618459 and 0.8581035. The random forest produced accuracies of 0.8907530 and 0.8625501. The neural network produced accuracies of 0.5810253 and 0.8684512. Based off of accuracies the best model was the first random forest with an accuracy of .8907530.\n",
    "Decision Tree\n",
    "set.seed(41)\n",
    "\n",
    "#Decision Tree\n",
    "dt1 <- train(target ~.,data = encodeMedData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter =  TRUE))\n",
    "## + Fold1: cp=0.008692 \n",
    "## - Fold1: cp=0.008692 \n",
    "## + Fold2: cp=0.008692 \n",
    "## - Fold2: cp=0.008692 \n",
    "## + Fold3: cp=0.008692 \n",
    "## - Fold3: cp=0.008692 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting cp = 0.00869 on full training set\n",
    "#Decision Tree Tuned\n",
    "myGrid1 = expand.grid(.cp=0.005)\n",
    "\n",
    "dt2 <- train(target ~.,data = encodeMedData, method = \"rpart\", trControl = trainControl(method =\"cv\", number = 3, verboseIter = TRUE), tuneGrid = myGrid1)\n",
    "## + Fold1: cp=0.005 \n",
    "## - Fold1: cp=0.005 \n",
    "## + Fold2: cp=0.005 \n",
    "## - Fold2: cp=0.005 \n",
    "## + Fold3: cp=0.005 \n",
    "## - Fold3: cp=0.005 \n",
    "## Aggregating results\n",
    "## Fitting final model on full training set\n",
    "dt1\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86587, 86586, 86587 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   cp           Accuracy   Kappa    \n",
    "##   0.008691511  0.8295889  0.6524899\n",
    "##   0.052098039  0.8094549  0.6138198\n",
    "##   0.562958175  0.6314066  0.1983979\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final value used for the model was cp = 0.008691511.\n",
    "dt2\n",
    "## CART \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (3 fold) \n",
    "## Summary of sample sizes: 86586, 86586, 86588 \n",
    "## Resampling results:\n",
    "## \n",
    "##   Accuracy   Kappa    \n",
    "##   0.8605483  0.7155511\n",
    "## \n",
    "## Tuning parameter 'cp' was held constant at a value of 0.005\n",
    "Glmnet\n",
    "#GLM\n",
    "glm1 = train(target~., data = encodeMedData, method=\"glmnet\")\n",
    "\n",
    "#GLM Tuned\n",
    "myGrid3 = expand.grid(.alpha=0:1,.lambda=seq(0.001,1,length=3))\n",
    "glm2 = train(target~., data = encodeMedData, method=\"glmnet\", tuneGrid=myGrid3)\n",
    "\n",
    "glm1\n",
    "## glmnet \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Bootstrapped (25 reps) \n",
    "## Summary of sample sizes: 129880, 129880, 129880, 129880, 129880, 129880, ... \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   alpha  lambda       Accuracy   Kappa    \n",
    "##   0.10   0.000597716  0.8618459  0.7205921\n",
    "##   0.10   0.005977160  0.8610572  0.7188948\n",
    "##   0.10   0.059771600  0.8545073  0.7052429\n",
    "##   0.55   0.000597716  0.8618175  0.7205295\n",
    "##   0.55   0.005977160  0.8592640  0.7151846\n",
    "##   0.55   0.059771600  0.8401204  0.6753144\n",
    "##   1.00   0.000597716  0.8617270  0.7203389\n",
    "##   1.00   0.005977160  0.8571747  0.7109143\n",
    "##   1.00   0.059771600  0.8187455  0.6320599\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final values used for the model were alpha = 0.1 and lambda\n",
    "##  = 0.000597716.\n",
    "glm2\n",
    "## glmnet \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Bootstrapped (25 reps) \n",
    "## Summary of sample sizes: 129880, 129880, 129880, 129880, 129880, 129880, ... \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   alpha  lambda  Accuracy   Kappa    \n",
    "##   0      0.0010  0.8581035  0.7126905\n",
    "##   0      0.5005  0.8407455  0.6765829\n",
    "##   0      1.0000  0.8301910  0.6543039\n",
    "##   1      0.0010  0.8613530  0.7195190\n",
    "##   1      0.5005  0.5476633  0.0000000\n",
    "##   1      1.0000  0.5476633  0.0000000\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final values used for the model were alpha = 1 and lambda = 0.001.\n",
    "Random Forest\n",
    "#Random Forest\n",
    "rf1 <- train(target ~.,data = encodeMedData, method = \"ranger\", trControl =      trainControl(method =\"cv\", number = 2, verboseIter = TRUE))\n",
    "## + Fold1: mtry= 2, min.node.size=1, splitrule=gini \n",
    "## - Fold1: mtry= 2, min.node.size=1, splitrule=gini \n",
    "## + Fold1: mtry=19, min.node.size=1, splitrule=gini \n",
    "## Growing trees.. Progress: 54%. Estimated remaining time: 26 seconds.\n",
    "## - Fold1: mtry=19, min.node.size=1, splitrule=gini \n",
    "## + Fold1: mtry=37, min.node.size=1, splitrule=gini \n",
    "## Growing trees.. Progress: 31%. Estimated remaining time: 1 minute, 10 seconds.\n",
    "## Growing trees.. Progress: 63%. Estimated remaining time: 35 seconds.\n",
    "## Growing trees.. Progress: 96%. Estimated remaining time: 4 seconds.\n",
    "## - Fold1: mtry=37, min.node.size=1, splitrule=gini \n",
    "## + Fold1: mtry= 2, min.node.size=1, splitrule=extratrees \n",
    "## - Fold1: mtry= 2, min.node.size=1, splitrule=extratrees \n",
    "## + Fold1: mtry=19, min.node.size=1, splitrule=extratrees \n",
    "## Growing trees.. Progress: 40%. Estimated remaining time: 46 seconds.\n",
    "## Growing trees.. Progress: 81%. Estimated remaining time: 14 seconds.\n",
    "## - Fold1: mtry=19, min.node.size=1, splitrule=extratrees \n",
    "## + Fold1: mtry=37, min.node.size=1, splitrule=extratrees \n",
    "## Growing trees.. Progress: 25%. Estimated remaining time: 1 minute, 34 seconds.\n",
    "## Growing trees.. Progress: 50%. Estimated remaining time: 1 minute, 3 seconds.\n",
    "## Growing trees.. Progress: 74%. Estimated remaining time: 33 seconds.\n",
    "## Growing trees.. Progress: 98%. Estimated remaining time: 2 seconds.\n",
    "## - Fold1: mtry=37, min.node.size=1, splitrule=extratrees \n",
    "## + Fold2: mtry= 2, min.node.size=1, splitrule=gini \n",
    "## - Fold2: mtry= 2, min.node.size=1, splitrule=gini \n",
    "## + Fold2: mtry=19, min.node.size=1, splitrule=gini \n",
    "## Growing trees.. Progress: 51%. Estimated remaining time: 30 seconds.\n",
    "## - Fold2: mtry=19, min.node.size=1, splitrule=gini \n",
    "## + Fold2: mtry=37, min.node.size=1, splitrule=gini \n",
    "## Growing trees.. Progress: 31%. Estimated remaining time: 1 minute, 7 seconds.\n",
    "## Growing trees.. Progress: 63%. Estimated remaining time: 36 seconds.\n",
    "## Growing trees.. Progress: 95%. Estimated remaining time: 5 seconds.\n",
    "## - Fold2: mtry=37, min.node.size=1, splitrule=gini \n",
    "## + Fold2: mtry= 2, min.node.size=1, splitrule=extratrees \n",
    "## - Fold2: mtry= 2, min.node.size=1, splitrule=extratrees \n",
    "## + Fold2: mtry=19, min.node.size=1, splitrule=extratrees \n",
    "## Growing trees.. Progress: 39%. Estimated remaining time: 48 seconds.\n",
    "## Growing trees.. Progress: 78%. Estimated remaining time: 17 seconds.\n",
    "## - Fold2: mtry=19, min.node.size=1, splitrule=extratrees \n",
    "## + Fold2: mtry=37, min.node.size=1, splitrule=extratrees \n",
    "## Growing trees.. Progress: 23%. Estimated remaining time: 1 minute, 46 seconds.\n",
    "## Growing trees.. Progress: 46%. Estimated remaining time: 1 minute, 14 seconds.\n",
    "## Growing trees.. Progress: 68%. Estimated remaining time: 44 seconds.\n",
    "## Growing trees.. Progress: 91%. Estimated remaining time: 12 seconds.\n",
    "## - Fold2: mtry=37, min.node.size=1, splitrule=extratrees \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting mtry = 19, splitrule = gini, min.node.size = 1 on full training set\n",
    "## Growing trees.. Progress: 22%. Estimated remaining time: 1 minute, 51 seconds.\n",
    "## Growing trees.. Progress: 44%. Estimated remaining time: 1 minute, 20 seconds.\n",
    "## Growing trees.. Progress: 66%. Estimated remaining time: 48 seconds.\n",
    "## Growing trees.. Progress: 88%. Estimated remaining time: 17 seconds.\n",
    "#Random Forest Tuned\n",
    "myGrid2 = expand.grid(mtry = c(1:2), splitrule = c(\"gini\"), min.node.size = c(1:2))\n",
    "\n",
    "rf2 <- train(target ~.,data = encodeMedData, method = \"ranger\", trControl = trainControl(method =\"cv\", number = 2, verboseIter = TRUE), tuneGrid = myGrid2)\n",
    "## + Fold1: mtry=1, splitrule=gini, min.node.size=1 \n",
    "## - Fold1: mtry=1, splitrule=gini, min.node.size=1 \n",
    "## + Fold1: mtry=2, splitrule=gini, min.node.size=1 \n",
    "## - Fold1: mtry=2, splitrule=gini, min.node.size=1 \n",
    "## + Fold1: mtry=1, splitrule=gini, min.node.size=2 \n",
    "## - Fold1: mtry=1, splitrule=gini, min.node.size=2 \n",
    "## + Fold1: mtry=2, splitrule=gini, min.node.size=2 \n",
    "## - Fold1: mtry=2, splitrule=gini, min.node.size=2 \n",
    "## + Fold2: mtry=1, splitrule=gini, min.node.size=1 \n",
    "## - Fold2: mtry=1, splitrule=gini, min.node.size=1 \n",
    "## + Fold2: mtry=2, splitrule=gini, min.node.size=1 \n",
    "## - Fold2: mtry=2, splitrule=gini, min.node.size=1 \n",
    "## + Fold2: mtry=1, splitrule=gini, min.node.size=2 \n",
    "## - Fold2: mtry=1, splitrule=gini, min.node.size=2 \n",
    "## + Fold2: mtry=2, splitrule=gini, min.node.size=2 \n",
    "## - Fold2: mtry=2, splitrule=gini, min.node.size=2 \n",
    "## Aggregating results\n",
    "## Selecting tuning parameters\n",
    "## Fitting mtry = 2, splitrule = gini, min.node.size = 1 on full training set\n",
    "rf1\n",
    "## Random Forest \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (2 fold) \n",
    "## Summary of sample sizes: 64940, 64940 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   mtry  splitrule   Accuracy   Kappa    \n",
    "##    2    gini        0.8907530  0.7788438\n",
    "##    2    extratrees  0.8890668  0.7754664\n",
    "##   19    gini        0.9190253  0.8365390\n",
    "##   19    extratrees  0.9157992  0.8300759\n",
    "##   37    gini        0.9160379  0.8304921\n",
    "##   37    extratrees  0.9148830  0.8282281\n",
    "## \n",
    "## Tuning parameter 'min.node.size' was held constant at a value of 1\n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final values used for the model were mtry = 19, splitrule = gini\n",
    "##  and min.node.size = 1.\n",
    "rf2\n",
    "## Random Forest \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Cross-Validated (2 fold) \n",
    "## Summary of sample sizes: 64941, 64939 \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   mtry  min.node.size  Accuracy   Kappa    \n",
    "##   1     1              0.8625501  0.7206981\n",
    "##   1     2              0.8652372  0.7262865\n",
    "##   2     1              0.8906067  0.7784586\n",
    "##   2     2              0.8904835  0.7782003\n",
    "## \n",
    "## Tuning parameter 'splitrule' was held constant at a value of gini\n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final values used for the model were mtry = 2, splitrule = gini\n",
    "##  and min.node.size = 1.\n",
    "Neural Network\n",
    "#Neural Network\n",
    "nn1 = train(target~., data = encodeMedData, method=\"nnet\")\n",
    "## # weights:  40\n",
    "## initial  value 92514.301362 \n",
    "## final  value 89432.930712 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 93849.475039 \n",
    "## final  value 89432.930712 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 91617.683775 \n",
    "## final  value 89432.930712 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 89536.083416 \n",
    "## iter  10 value 87837.279614\n",
    "## iter  20 value 82953.661807\n",
    "## iter  30 value 64112.381761\n",
    "## iter  40 value 52135.225699\n",
    "## iter  50 value 48878.259564\n",
    "## iter  60 value 48203.107834\n",
    "## iter  70 value 47629.689775\n",
    "## iter  80 value 46773.079408\n",
    "## iter  90 value 45209.067490\n",
    "## iter 100 value 44098.417308\n",
    "## final  value 44098.417308 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89577.672226 \n",
    "## iter  10 value 88582.059525\n",
    "## iter  20 value 86516.765745\n",
    "## iter  30 value 79587.398388\n",
    "## iter  40 value 72463.044359\n",
    "## iter  50 value 67727.899120\n",
    "## iter  60 value 60784.850205\n",
    "## iter  70 value 52415.813317\n",
    "## iter  80 value 48269.692571\n",
    "## iter  90 value 47642.925203\n",
    "## iter 100 value 47160.400406\n",
    "## final  value 47160.400406 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 101446.584891 \n",
    "## iter  10 value 88553.775888\n",
    "## iter  20 value 85614.367349\n",
    "## iter  30 value 75173.559539\n",
    "## iter  40 value 59253.853370\n",
    "## iter  50 value 52415.498718\n",
    "## iter  60 value 46305.039915\n",
    "## iter  70 value 43043.938432\n",
    "## iter  80 value 42782.039566\n",
    "## iter  90 value 42112.754917\n",
    "## iter 100 value 41493.608091\n",
    "## final  value 41493.608091 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91156.111480 \n",
    "## iter  10 value 88091.616275\n",
    "## iter  20 value 68308.799484\n",
    "## iter  30 value 52150.202064\n",
    "## iter  40 value 50387.211084\n",
    "## iter  50 value 49813.010679\n",
    "## iter  60 value 49657.400005\n",
    "## iter  70 value 49360.399784\n",
    "## iter  80 value 49004.925834\n",
    "## iter  90 value 48731.893469\n",
    "## iter 100 value 48680.978147\n",
    "## final  value 48680.978147 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 111636.038576 \n",
    "## iter  10 value 88390.676624\n",
    "## iter  20 value 87504.638669\n",
    "## iter  30 value 83571.132623\n",
    "## iter  40 value 52289.687303\n",
    "## iter  50 value 48507.837604\n",
    "## iter  60 value 47828.273646\n",
    "## iter  70 value 47568.360454\n",
    "## iter  80 value 47412.114261\n",
    "## iter  90 value 46166.825620\n",
    "## iter 100 value 44918.982007\n",
    "## final  value 44918.982007 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89371.219365 \n",
    "## iter  10 value 87788.213573\n",
    "## iter  20 value 83466.737487\n",
    "## iter  30 value 69470.436875\n",
    "## iter  40 value 57384.502455\n",
    "## iter  50 value 52184.487513\n",
    "## iter  60 value 50647.521469\n",
    "## iter  70 value 49844.701497\n",
    "## iter  80 value 49674.010094\n",
    "## iter  90 value 49435.654032\n",
    "## iter 100 value 49341.492523\n",
    "## final  value 49341.492523 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89394.441534 \n",
    "## final  value 89359.722170 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 93058.691540 \n",
    "## iter  10 value 89067.494520\n",
    "## iter  20 value 86503.868695\n",
    "## iter  30 value 62275.550416\n",
    "## iter  40 value 54382.357491\n",
    "## iter  50 value 49665.435458\n",
    "## iter  60 value 48540.912220\n",
    "## iter  70 value 48322.209140\n",
    "## iter  80 value 48142.680955\n",
    "## iter  90 value 47933.157789\n",
    "## iter 100 value 47856.956160\n",
    "## final  value 47856.956160 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 107171.647515 \n",
    "## iter  10 value 87530.548738\n",
    "## iter  20 value 80457.866922\n",
    "## iter  30 value 68059.335087\n",
    "## iter  40 value 58172.479067\n",
    "## iter  50 value 48664.406105\n",
    "## iter  60 value 47150.318705\n",
    "## iter  70 value 46805.604841\n",
    "## iter  80 value 46454.878961\n",
    "## iter  90 value 45578.211139\n",
    "## iter 100 value 45271.616061\n",
    "## final  value 45271.616061 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92990.571761 \n",
    "## iter  10 value 89108.976083\n",
    "## iter  20 value 87819.669189\n",
    "## iter  30 value 87177.813416\n",
    "## iter  40 value 82996.536274\n",
    "## iter  50 value 74384.873460\n",
    "## iter  60 value 61000.163880\n",
    "## iter  70 value 56276.011305\n",
    "## iter  80 value 52278.640504\n",
    "## iter  90 value 50035.506578\n",
    "## iter 100 value 48939.711741\n",
    "## final  value 48939.711741 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89704.480409 \n",
    "## iter  10 value 89357.809088\n",
    "## iter  20 value 87601.262490\n",
    "## iter  30 value 86341.466129\n",
    "## iter  40 value 80902.832003\n",
    "## iter  50 value 70426.478421\n",
    "## iter  60 value 57460.744963\n",
    "## iter  70 value 53140.514049\n",
    "## iter  80 value 52133.172596\n",
    "## iter  90 value 49755.794969\n",
    "## iter 100 value 48669.080979\n",
    "## final  value 48669.080979 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89485.220912 \n",
    "## iter  10 value 88404.653710\n",
    "## iter  20 value 82250.622111\n",
    "## iter  30 value 72328.745124\n",
    "## iter  40 value 69953.047539\n",
    "## iter  50 value 62831.354224\n",
    "## iter  60 value 57982.894700\n",
    "## iter  70 value 52975.067966\n",
    "## iter  80 value 48423.764235\n",
    "## iter  90 value 45530.914803\n",
    "## iter 100 value 42739.502340\n",
    "## final  value 42739.502340 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91868.749783 \n",
    "## final  value 89359.732878 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90536.194448 \n",
    "## iter  10 value 89040.705108\n",
    "## iter  20 value 86341.890430\n",
    "## iter  30 value 71605.343610\n",
    "## iter  40 value 55312.110253\n",
    "## iter  50 value 49018.892131\n",
    "## iter  60 value 48238.580394\n",
    "## iter  70 value 47947.688287\n",
    "## iter  80 value 47882.786387\n",
    "## iter  90 value 47840.554375\n",
    "## iter 100 value 47598.086562\n",
    "## final  value 47598.086562 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89412.244567 \n",
    "## iter  10 value 87461.135902\n",
    "## iter  20 value 78875.110912\n",
    "## iter  30 value 58737.118237\n",
    "## iter  40 value 55448.523921\n",
    "## iter  50 value 52382.205659\n",
    "## iter  60 value 49629.944660\n",
    "## iter  70 value 48162.003810\n",
    "## iter  80 value 47487.003787\n",
    "## iter  90 value 46535.657112\n",
    "## iter 100 value 45903.104031\n",
    "## final  value 45903.104031 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 109994.723718 \n",
    "## final  value 89470.806528 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 92419.705518 \n",
    "## iter  10 value 88607.562645\n",
    "## iter  20 value 85090.160446\n",
    "## iter  30 value 82500.422625\n",
    "## iter  40 value 72593.647871\n",
    "## iter  50 value 56458.719146\n",
    "## iter  60 value 48886.238133\n",
    "## iter  70 value 45253.759130\n",
    "## iter  80 value 42367.177901\n",
    "## iter  90 value 40723.215757\n",
    "## iter 100 value 39201.734760\n",
    "## final  value 39201.734760 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90251.435853 \n",
    "## iter  10 value 87964.301296\n",
    "## iter  20 value 86036.205103\n",
    "## iter  30 value 79861.228834\n",
    "## iter  40 value 74560.125717\n",
    "## iter  50 value 69888.882726\n",
    "## iter  60 value 64471.765189\n",
    "## iter  70 value 63765.553663\n",
    "## iter  80 value 62182.872011\n",
    "## iter  90 value 57772.987556\n",
    "## iter 100 value 52486.202823\n",
    "## final  value 52486.202823 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 101812.623530 \n",
    "## final  value 89470.780710 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 92903.574352 \n",
    "## iter  10 value 87537.419053\n",
    "## iter  20 value 79744.903240\n",
    "## iter  30 value 61335.132414\n",
    "## iter  40 value 53431.693365\n",
    "## iter  50 value 50728.345045\n",
    "## iter  60 value 50027.797230\n",
    "## iter  70 value 49731.570466\n",
    "## iter  80 value 49429.259366\n",
    "## iter  90 value 48736.834510\n",
    "## iter 100 value 47257.840790\n",
    "## final  value 47257.840790 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 95089.613474 \n",
    "## iter  10 value 89259.451881\n",
    "## iter  20 value 88239.591788\n",
    "## iter  30 value 80584.937001\n",
    "## iter  40 value 63141.198743\n",
    "## iter  50 value 59026.987263\n",
    "## iter  60 value 53003.607402\n",
    "## iter  70 value 52264.592261\n",
    "## iter  80 value 51988.794681\n",
    "## iter  90 value 50676.680617\n",
    "## iter 100 value 49047.448888\n",
    "## final  value 49047.448888 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 96588.045957 \n",
    "## final  value 89470.868879 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 94548.548810 \n",
    "## iter  10 value 88239.321388\n",
    "## iter  20 value 81933.737365\n",
    "## iter  30 value 73864.203902\n",
    "## iter  40 value 68528.618443\n",
    "## iter  50 value 63772.684136\n",
    "## iter  60 value 62255.254271\n",
    "## iter  70 value 61143.440736\n",
    "## iter  80 value 60325.363225\n",
    "## iter  90 value 58267.234962\n",
    "## iter 100 value 56934.521295\n",
    "## final  value 56934.521295 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 101306.625835 \n",
    "## iter  10 value 89471.410976\n",
    "## iter  20 value 89470.035798\n",
    "## iter  20 value 89470.034936\n",
    "## iter  20 value 89470.034936\n",
    "## final  value 89470.034936 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 89572.094382 \n",
    "## final  value 89431.972524 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 92050.688546 \n",
    "## final  value 89431.972524 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 90931.161263 \n",
    "## final  value 89431.972704 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 89570.901635 \n",
    "## final  value 89432.245152 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 97993.493115 \n",
    "## iter  10 value 88162.722315\n",
    "## iter  20 value 72042.877608\n",
    "## iter  30 value 57676.067212\n",
    "## iter  40 value 52194.820190\n",
    "## iter  50 value 51057.209033\n",
    "## iter  60 value 50160.739344\n",
    "## iter  70 value 48457.771123\n",
    "## iter  80 value 47252.978126\n",
    "## iter  90 value 47102.318538\n",
    "## iter 100 value 46066.633661\n",
    "## final  value 46066.633661 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 96895.237121 \n",
    "## iter  10 value 88777.261273\n",
    "## iter  20 value 87755.083585\n",
    "## iter  30 value 80477.694279\n",
    "## iter  40 value 61671.254341\n",
    "## iter  50 value 53939.267292\n",
    "## iter  60 value 50727.131938\n",
    "## iter  70 value 50475.235658\n",
    "## iter  80 value 50371.616141\n",
    "## iter  90 value 50175.049739\n",
    "## iter 100 value 49816.178270\n",
    "## final  value 49816.178270 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89594.659922 \n",
    "## iter  10 value 89346.911221\n",
    "## iter  20 value 87425.192139\n",
    "## iter  30 value 82275.253738\n",
    "## iter  40 value 72438.077347\n",
    "## iter  50 value 57602.502851\n",
    "## iter  60 value 51383.205968\n",
    "## iter  70 value 50103.830598\n",
    "## iter  80 value 49513.853133\n",
    "## iter  90 value 49307.984045\n",
    "## iter 100 value 48972.990028\n",
    "## final  value 48972.990028 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89466.767649 \n",
    "## iter  10 value 88649.626136\n",
    "## iter  20 value 81245.422413\n",
    "## iter  30 value 68347.859433\n",
    "## iter  40 value 61673.916753\n",
    "## iter  50 value 59743.242266\n",
    "## iter  60 value 52185.479577\n",
    "## iter  70 value 48439.059418\n",
    "## iter  80 value 48150.621633\n",
    "## iter  90 value 48062.257753\n",
    "## iter 100 value 47979.584363\n",
    "## final  value 47979.584363 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 95073.185010 \n",
    "## iter  10 value 87490.078459\n",
    "## iter  20 value 62849.540867\n",
    "## iter  30 value 56719.329854\n",
    "## iter  40 value 52165.633439\n",
    "## iter  50 value 49444.120296\n",
    "## iter  60 value 48787.424994\n",
    "## iter  70 value 48463.243885\n",
    "## iter  80 value 48113.388911\n",
    "## iter  90 value 48046.264451\n",
    "## iter 100 value 47987.689928\n",
    "## final  value 47987.689928 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92354.365770 \n",
    "## final  value 89422.927573 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 100528.103960 \n",
    "## final  value 89422.927573 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 100878.732331 \n",
    "## iter  10 value 89422.942647\n",
    "## final  value 89422.927573 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 93289.294585 \n",
    "## iter  10 value 88000.708782\n",
    "## iter  20 value 80150.270127\n",
    "## iter  30 value 63530.414881\n",
    "## iter  40 value 51691.169415\n",
    "## iter  50 value 49805.054319\n",
    "## iter  60 value 48382.640008\n",
    "## iter  70 value 47197.783601\n",
    "## iter  80 value 46221.254511\n",
    "## iter  90 value 45516.586691\n",
    "## iter 100 value 44351.643448\n",
    "## final  value 44351.643448 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 99974.017620 \n",
    "## iter  10 value 89553.173936\n",
    "## iter  20 value 89281.887480\n",
    "## iter  30 value 87476.413346\n",
    "## iter  40 value 85879.807081\n",
    "## iter  50 value 81898.633299\n",
    "## iter  60 value 80652.602061\n",
    "## iter  70 value 74557.570428\n",
    "## iter  80 value 69801.959001\n",
    "## iter  90 value 61686.194515\n",
    "## iter 100 value 51664.105175\n",
    "## final  value 51664.105175 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90539.149679 \n",
    "## iter  10 value 87964.733759\n",
    "## iter  20 value 83932.475625\n",
    "## iter  30 value 70862.891530\n",
    "## iter  40 value 59338.163334\n",
    "## iter  50 value 54806.204153\n",
    "## iter  60 value 54061.606960\n",
    "## iter  70 value 53883.949632\n",
    "## iter  80 value 52556.851344\n",
    "## iter  90 value 49893.932262\n",
    "## iter 100 value 43934.193050\n",
    "## final  value 43934.193050 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89852.608380 \n",
    "## final  value 89422.928488 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 91827.812125 \n",
    "## iter  10 value 86103.672566\n",
    "## iter  20 value 78694.303578\n",
    "## iter  30 value 69206.852089\n",
    "## iter  40 value 63519.368228\n",
    "## iter  50 value 54011.949178\n",
    "## iter  60 value 50761.918247\n",
    "## iter  70 value 48675.197543\n",
    "## iter  80 value 47026.327304\n",
    "## iter  90 value 46771.097017\n",
    "## iter 100 value 46555.128377\n",
    "## final  value 46555.128377 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 102016.165499 \n",
    "## iter  10 value 89370.683810\n",
    "## iter  20 value 85669.656897\n",
    "## iter  30 value 81171.291415\n",
    "## iter  40 value 70568.637228\n",
    "## iter  50 value 59987.681157\n",
    "## iter  60 value 58049.890150\n",
    "## iter  70 value 54499.863447\n",
    "## iter  80 value 52064.950964\n",
    "## iter  90 value 50826.816797\n",
    "## iter 100 value 50263.853578\n",
    "## final  value 50263.853578 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 95114.613357 \n",
    "## final  value 89460.941231 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90222.747861 \n",
    "## iter  10 value 88138.757306\n",
    "## iter  20 value 85132.982115\n",
    "## iter  30 value 83059.777980\n",
    "## iter  40 value 77995.077819\n",
    "## iter  50 value 65389.819440\n",
    "## iter  60 value 50330.838544\n",
    "## iter  70 value 47821.222818\n",
    "## iter  80 value 47555.614801\n",
    "## iter  90 value 47524.263716\n",
    "## iter 100 value 47175.964647\n",
    "## final  value 47175.964647 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 92408.955495 \n",
    "## iter  10 value 89476.045997\n",
    "## iter  20 value 88636.646978\n",
    "## iter  30 value 84882.118605\n",
    "## iter  40 value 74661.908801\n",
    "## iter  50 value 64027.642556\n",
    "## iter  60 value 61450.377428\n",
    "## iter  70 value 59685.395338\n",
    "## iter  80 value 57879.864255\n",
    "## iter  90 value 55447.392269\n",
    "## iter 100 value 53496.000148\n",
    "## final  value 53496.000148 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91245.396334 \n",
    "## iter  10 value 89462.901651\n",
    "## iter  20 value 89460.248167\n",
    "## iter  30 value 88031.464699\n",
    "## iter  40 value 86722.609822\n",
    "## iter  50 value 85500.881974\n",
    "## iter  60 value 80612.657230\n",
    "## iter  70 value 76450.548448\n",
    "## iter  80 value 75995.502900\n",
    "## iter  90 value 75961.837407\n",
    "## iter 100 value 75641.025610\n",
    "## final  value 75641.025610 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 106028.727560 \n",
    "## iter  10 value 89461.005420\n",
    "## iter  20 value 87829.747822\n",
    "## iter  30 value 86328.644895\n",
    "## iter  40 value 85272.476976\n",
    "## iter  50 value 80218.657825\n",
    "## iter  60 value 74067.338213\n",
    "## iter  70 value 70027.808806\n",
    "## iter  80 value 67757.571157\n",
    "## iter  90 value 65857.056514\n",
    "## iter 100 value 63300.043286\n",
    "## final  value 63300.043286 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 94863.200782 \n",
    "## iter  10 value 88838.430963\n",
    "## iter  20 value 86984.399987\n",
    "## iter  30 value 86405.449840\n",
    "## iter  40 value 82258.000061\n",
    "## iter  50 value 64614.327954\n",
    "## iter  60 value 52970.057172\n",
    "## iter  70 value 48976.493829\n",
    "## iter  80 value 46160.327715\n",
    "## iter  90 value 43937.975385\n",
    "## iter 100 value 43076.793340\n",
    "## final  value 43076.793340 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 93631.987338 \n",
    "## final  value 89460.948258 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89616.293555 \n",
    "## iter  10 value 89461.837248\n",
    "## iter  20 value 88204.881266\n",
    "## iter  30 value 85921.637647\n",
    "## iter  40 value 76223.855476\n",
    "## iter  50 value 65851.681416\n",
    "## iter  60 value 62397.162605\n",
    "## iter  70 value 60192.176133\n",
    "## iter  80 value 58367.880628\n",
    "## iter  90 value 56026.648477\n",
    "## iter 100 value 55058.071708\n",
    "## final  value 55058.071708 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 102650.131467 \n",
    "## iter  10 value 87710.287686\n",
    "## iter  20 value 85498.575205\n",
    "## iter  30 value 67821.998725\n",
    "## iter  40 value 61391.729982\n",
    "## iter  50 value 57043.013559\n",
    "## iter  60 value 54014.989178\n",
    "## iter  70 value 52086.028626\n",
    "## iter  80 value 51194.185170\n",
    "## iter  90 value 50662.493269\n",
    "## iter 100 value 50007.556413\n",
    "## final  value 50007.556413 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90646.921079 \n",
    "## final  value 89464.860560 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 95210.116412 \n",
    "## iter  10 value 87251.141007\n",
    "## iter  20 value 80024.694239\n",
    "## iter  30 value 71090.798583\n",
    "## iter  40 value 60346.696076\n",
    "## iter  50 value 57509.371180\n",
    "## iter  60 value 55699.084492\n",
    "## iter  70 value 55438.167202\n",
    "## iter  80 value 55241.845579\n",
    "## iter  90 value 55221.711401\n",
    "## iter 100 value 55090.996784\n",
    "## final  value 55090.996784 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 111315.117312 \n",
    "## iter  10 value 91416.045448\n",
    "## iter  20 value 89554.867119\n",
    "## iter  30 value 89259.995955\n",
    "## iter  40 value 88219.732191\n",
    "## iter  50 value 85577.343739\n",
    "## iter  60 value 79334.956348\n",
    "## iter  70 value 61894.516341\n",
    "## iter  80 value 52358.544609\n",
    "## iter  90 value 48813.262040\n",
    "## iter 100 value 48066.604891\n",
    "## final  value 48066.604891 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90343.728429 \n",
    "## iter  10 value 89464.916064\n",
    "## final  value 89464.865975 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 98851.117078 \n",
    "## iter  10 value 84894.673628\n",
    "## iter  20 value 77911.332665\n",
    "## iter  30 value 62015.298453\n",
    "## iter  40 value 49888.672520\n",
    "## iter  50 value 48606.661384\n",
    "## iter  60 value 47446.417700\n",
    "## iter  70 value 47169.423081\n",
    "## iter  80 value 47062.277847\n",
    "## iter  90 value 46897.497541\n",
    "## iter 100 value 46730.131559\n",
    "## final  value 46730.131559 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 93726.842057 \n",
    "## iter  10 value 86583.178018\n",
    "## iter  20 value 84739.566269\n",
    "## iter  30 value 79089.061681\n",
    "## iter  40 value 57735.973230\n",
    "## iter  50 value 49766.109620\n",
    "## iter  60 value 48052.474206\n",
    "## iter  70 value 46994.903328\n",
    "## iter  80 value 45797.179649\n",
    "## iter  90 value 43357.236661\n",
    "## iter 100 value 41087.231626\n",
    "## final  value 41087.231626 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90886.343337 \n",
    "## final  value 89464.862174 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89622.862575 \n",
    "## iter  10 value 87744.017215\n",
    "## iter  20 value 86288.716539\n",
    "## iter  30 value 81567.910760\n",
    "## iter  40 value 79195.878499\n",
    "## iter  50 value 67692.945401\n",
    "## iter  60 value 58488.749197\n",
    "## iter  70 value 54126.121169\n",
    "## iter  80 value 49306.561701\n",
    "## iter  90 value 46697.322715\n",
    "## iter 100 value 45612.368894\n",
    "## final  value 45612.368894 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 100600.507846 \n",
    "## iter  10 value 87597.692095\n",
    "## iter  20 value 84408.986810\n",
    "## iter  30 value 60333.596314\n",
    "## iter  40 value 50146.214432\n",
    "## iter  50 value 48246.258768\n",
    "## iter  60 value 47122.349449\n",
    "## iter  70 value 46245.748517\n",
    "## iter  80 value 45544.087951\n",
    "## iter  90 value 43389.759214\n",
    "## iter 100 value 41047.012155\n",
    "## final  value 41047.012155 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 110332.343081 \n",
    "## final  value 89436.946617 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90088.323154 \n",
    "## iter  10 value 87631.406146\n",
    "## iter  20 value 80188.925979\n",
    "## iter  30 value 74027.869740\n",
    "## iter  40 value 54844.748695\n",
    "## iter  50 value 49128.531250\n",
    "## iter  60 value 47786.114376\n",
    "## iter  70 value 47597.808763\n",
    "## iter  80 value 47578.254118\n",
    "## iter  90 value 47500.615602\n",
    "## iter 100 value 47435.748794\n",
    "## final  value 47435.748794 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 93264.405333 \n",
    "## iter  10 value 88277.468673\n",
    "## iter  20 value 87428.472526\n",
    "## iter  30 value 86716.164038\n",
    "## iter  40 value 75787.280690\n",
    "## iter  50 value 63414.394027\n",
    "## iter  60 value 49185.496884\n",
    "## iter  70 value 44417.827848\n",
    "## iter  80 value 41725.449608\n",
    "## iter  90 value 40826.027550\n",
    "## iter 100 value 40534.317687\n",
    "## final  value 40534.317687 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89549.969059 \n",
    "## iter  10 value 88289.510165\n",
    "## iter  20 value 75446.728843\n",
    "## iter  30 value 69169.365161\n",
    "## iter  40 value 67908.763155\n",
    "## iter  50 value 66488.250279\n",
    "## iter  60 value 58377.168780\n",
    "## iter  70 value 51111.274939\n",
    "## iter  80 value 49284.642092\n",
    "## iter  90 value 47649.540660\n",
    "## iter 100 value 46837.224556\n",
    "## final  value 46837.224556 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 92502.238725 \n",
    "## iter  10 value 87672.473283\n",
    "## iter  20 value 79898.505696\n",
    "## iter  30 value 58721.823701\n",
    "## iter  40 value 53195.468342\n",
    "## iter  50 value 52010.221883\n",
    "## iter  60 value 49956.937316\n",
    "## iter  70 value 48068.850063\n",
    "## iter  80 value 47140.858231\n",
    "## iter  90 value 46069.871740\n",
    "## iter 100 value 45372.920035\n",
    "## final  value 45372.920035 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 98814.226727 \n",
    "## iter  10 value 89617.632347\n",
    "## iter  20 value 89426.468727\n",
    "## iter  30 value 86339.313473\n",
    "## iter  40 value 78266.477786\n",
    "## iter  50 value 55683.147855\n",
    "## iter  60 value 51795.211031\n",
    "## iter  70 value 51656.795055\n",
    "## iter  80 value 50626.792378\n",
    "## iter  90 value 49324.504864\n",
    "## iter 100 value 47342.879660\n",
    "## final  value 47342.879660 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90231.748653 \n",
    "## iter  10 value 88203.694179\n",
    "## iter  20 value 70381.842717\n",
    "## iter  30 value 57416.130511\n",
    "## iter  40 value 53938.129072\n",
    "## iter  50 value 52848.541229\n",
    "## iter  60 value 52115.418081\n",
    "## iter  70 value 51781.446997\n",
    "## iter  80 value 51393.741658\n",
    "## iter  90 value 51008.937480\n",
    "## iter 100 value 50790.425960\n",
    "## final  value 50790.425960 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89635.891262 \n",
    "## iter  10 value 89438.378323\n",
    "## iter  20 value 89107.362454\n",
    "## iter  30 value 88301.480852\n",
    "## iter  40 value 86724.012870\n",
    "## iter  50 value 80394.955466\n",
    "## iter  60 value 71251.159787\n",
    "## iter  70 value 63043.682372\n",
    "## iter  80 value 59614.059965\n",
    "## iter  90 value 58615.424030\n",
    "## iter 100 value 57923.289882\n",
    "## final  value 57923.289882 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 114301.585955 \n",
    "## iter  10 value 89435.117248\n",
    "## iter  20 value 89433.000496\n",
    "## iter  30 value 87385.493373\n",
    "## iter  40 value 77852.886269\n",
    "## iter  50 value 67104.123792\n",
    "## iter  60 value 57795.571589\n",
    "## iter  70 value 51203.915259\n",
    "## iter  80 value 49044.877173\n",
    "## iter  90 value 47792.484043\n",
    "## iter 100 value 47681.546313\n",
    "## final  value 47681.546313 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 98512.983156 \n",
    "## final  value 89406.786859 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89917.289053 \n",
    "## iter  10 value 88117.231257\n",
    "## iter  20 value 79533.407406\n",
    "## iter  30 value 70431.253879\n",
    "## iter  40 value 69658.919748\n",
    "## iter  50 value 69406.675913\n",
    "## iter  60 value 69192.542152\n",
    "## iter  70 value 69033.155511\n",
    "## iter  80 value 64344.039730\n",
    "## iter  90 value 50922.420293\n",
    "## iter 100 value 48834.729877\n",
    "## final  value 48834.729877 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90765.253162 \n",
    "## final  value 89406.786859 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 90495.413292 \n",
    "## iter  10 value 87826.034902\n",
    "## iter  20 value 84037.734439\n",
    "## iter  30 value 69656.887789\n",
    "## iter  40 value 52794.946830\n",
    "## iter  50 value 50206.030636\n",
    "## iter  60 value 48904.906456\n",
    "## iter  70 value 47773.632139\n",
    "## iter  80 value 47024.324930\n",
    "## iter  90 value 46310.329496\n",
    "## iter 100 value 44575.637910\n",
    "## final  value 44575.637910 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 108153.968200 \n",
    "## iter  10 value 89390.357891\n",
    "## iter  20 value 88670.917468\n",
    "## iter  30 value 77401.428063\n",
    "## iter  40 value 66739.766754\n",
    "## iter  50 value 62368.804785\n",
    "## iter  60 value 50432.967160\n",
    "## iter  70 value 44400.250782\n",
    "## iter  80 value 42237.158318\n",
    "## iter  90 value 40761.262974\n",
    "## iter 100 value 39348.273439\n",
    "## final  value 39348.273439 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 93457.375166 \n",
    "## iter  10 value 89410.464867\n",
    "## iter  20 value 87865.653681\n",
    "## iter  30 value 87044.254051\n",
    "## iter  40 value 85807.228890\n",
    "## iter  50 value 83209.588064\n",
    "## iter  60 value 75316.318727\n",
    "## iter  70 value 61782.250156\n",
    "## iter  80 value 54529.043849\n",
    "## iter  90 value 49568.454420\n",
    "## iter 100 value 48818.405046\n",
    "## final  value 48818.405046 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 98875.739359 \n",
    "## final  value 89406.890808 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 110204.436067 \n",
    "## iter  10 value 88238.703734\n",
    "## iter  20 value 85266.172841\n",
    "## iter  30 value 82014.019231\n",
    "## iter  40 value 68408.313068\n",
    "## iter  50 value 54308.330410\n",
    "## iter  60 value 48664.310296\n",
    "## iter  70 value 47083.618231\n",
    "## iter  80 value 44973.312025\n",
    "## iter  90 value 44181.778235\n",
    "## iter 100 value 43563.117988\n",
    "## final  value 43563.117988 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89386.481426 \n",
    "## iter  10 value 87772.704114\n",
    "## iter  20 value 86835.982978\n",
    "## iter  30 value 85580.775965\n",
    "## iter  40 value 84329.273241\n",
    "## iter  50 value 76035.371290\n",
    "## iter  60 value 70060.306465\n",
    "## iter  70 value 58926.942454\n",
    "## iter  80 value 53759.171866\n",
    "## iter  90 value 48140.436782\n",
    "## iter 100 value 43775.684772\n",
    "## final  value 43775.684772 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91844.100820 \n",
    "## final  value 89430.437807 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 95105.516325 \n",
    "## iter  10 value 89420.036151\n",
    "## iter  20 value 88497.344649\n",
    "## iter  30 value 83561.699781\n",
    "## iter  40 value 66977.586111\n",
    "## iter  50 value 49926.807584\n",
    "## iter  60 value 48078.991491\n",
    "## iter  70 value 47730.606246\n",
    "## iter  80 value 47626.664210\n",
    "## iter  90 value 47559.205583\n",
    "## iter 100 value 47485.844553\n",
    "## final  value 47485.844553 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89540.681094 \n",
    "## iter  10 value 87460.316716\n",
    "## iter  20 value 74636.699493\n",
    "## iter  30 value 66490.407561\n",
    "## iter  40 value 55760.738769\n",
    "## iter  50 value 48868.267665\n",
    "## iter  60 value 45411.907763\n",
    "## iter  70 value 42478.581568\n",
    "## iter  80 value 41029.273611\n",
    "## iter  90 value 40264.846073\n",
    "## iter 100 value 39857.629879\n",
    "## final  value 39857.629879 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 96234.528083 \n",
    "## iter  10 value 89430.489097\n",
    "## final  value 89430.469577 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89732.397255 \n",
    "## iter  10 value 88391.728940\n",
    "## iter  20 value 87650.582717\n",
    "## iter  30 value 87179.839296\n",
    "## iter  40 value 77956.540976\n",
    "## iter  50 value 68472.422786\n",
    "## iter  60 value 64026.314537\n",
    "## iter  70 value 59536.368825\n",
    "## iter  80 value 54327.045416\n",
    "## iter  90 value 49287.008917\n",
    "## iter 100 value 46318.161026\n",
    "## final  value 46318.161026 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 94805.840990 \n",
    "## iter  10 value 88213.348863\n",
    "## iter  20 value 82603.480096\n",
    "## iter  30 value 70963.655614\n",
    "## iter  40 value 66608.848400\n",
    "## iter  50 value 65052.441668\n",
    "## iter  60 value 63218.412072\n",
    "## iter  70 value 55879.615702\n",
    "## iter  80 value 49662.781256\n",
    "## iter  90 value 47084.943478\n",
    "## iter 100 value 45945.812359\n",
    "## final  value 45945.812359 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92109.721150 \n",
    "## final  value 89430.457991 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 97007.611144 \n",
    "## iter  10 value 87747.161948\n",
    "## iter  20 value 79934.895751\n",
    "## iter  30 value 65514.633352\n",
    "## iter  40 value 55919.829542\n",
    "## iter  50 value 51038.795450\n",
    "## iter  60 value 48880.798922\n",
    "## iter  70 value 48306.231054\n",
    "## iter  80 value 48205.655810\n",
    "## iter  90 value 48126.787613\n",
    "## iter 100 value 48071.477834\n",
    "## final  value 48071.477834 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89349.632168 \n",
    "## iter  10 value 87483.501229\n",
    "## iter  20 value 80051.127468\n",
    "## iter  30 value 62927.307930\n",
    "## iter  40 value 58747.826496\n",
    "## iter  50 value 52570.311414\n",
    "## iter  60 value 50476.585527\n",
    "## iter  70 value 49474.191778\n",
    "## iter  80 value 48973.915756\n",
    "## iter  90 value 48857.199438\n",
    "## iter 100 value 48795.593757\n",
    "## final  value 48795.593757 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 99667.397318 \n",
    "## final  value 89486.993936 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 105904.643001 \n",
    "## iter  10 value 89361.456550\n",
    "## iter  20 value 88254.004908\n",
    "## iter  30 value 72425.339522\n",
    "## iter  40 value 54008.991058\n",
    "## iter  50 value 51342.826241\n",
    "## iter  60 value 50613.975714\n",
    "## iter  70 value 50324.910575\n",
    "## iter  80 value 49716.485234\n",
    "## iter  90 value 49507.377233\n",
    "## iter 100 value 49377.670404\n",
    "## final  value 49377.670404 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 91558.840045 \n",
    "## iter  10 value 87798.754394\n",
    "## iter  20 value 86365.378827\n",
    "## iter  30 value 78660.779988\n",
    "## iter  40 value 59633.876346\n",
    "## iter  50 value 56553.480282\n",
    "## iter  60 value 53668.167202\n",
    "## iter  70 value 51339.019103\n",
    "## iter  80 value 49226.911491\n",
    "## iter  90 value 46898.534058\n",
    "## iter 100 value 42351.848662\n",
    "## final  value 42351.848662 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 114983.778359 \n",
    "## iter  10 value 89484.379384\n",
    "## iter  20 value 88557.312830\n",
    "## iter  30 value 86524.372532\n",
    "## iter  40 value 82629.997333\n",
    "## iter  50 value 76499.171598\n",
    "## iter  60 value 66431.730632\n",
    "## iter  70 value 54284.395161\n",
    "## iter  80 value 46886.786329\n",
    "## iter  90 value 45297.258164\n",
    "## iter 100 value 43188.193706\n",
    "## final  value 43188.193706 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 97136.844131 \n",
    "## iter  10 value 88554.970054\n",
    "## iter  20 value 74124.131697\n",
    "## iter  30 value 63734.608251\n",
    "## iter  40 value 51370.912824\n",
    "## iter  50 value 50114.256941\n",
    "## iter  60 value 49667.913693\n",
    "## iter  70 value 48470.112654\n",
    "## iter  80 value 47166.605063\n",
    "## iter  90 value 44494.098967\n",
    "## iter 100 value 42085.177057\n",
    "## final  value 42085.177057 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 91346.865925 \n",
    "## iter  10 value 88342.269540\n",
    "## iter  20 value 83824.671100\n",
    "## iter  30 value 70449.670130\n",
    "## iter  40 value 55750.917108\n",
    "## iter  50 value 53823.965656\n",
    "## iter  60 value 52945.747419\n",
    "## iter  70 value 52714.004876\n",
    "## iter  80 value 51048.352271\n",
    "## iter  90 value 49817.892233\n",
    "## iter 100 value 47763.917341\n",
    "## final  value 47763.917341 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91903.622419 \n",
    "## final  value 89487.281092 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90717.037113 \n",
    "## iter  10 value 86962.271202\n",
    "## iter  20 value 83418.926324\n",
    "## iter  30 value 81689.957074\n",
    "## iter  40 value 78042.632410\n",
    "## iter  50 value 64768.626573\n",
    "## iter  60 value 50947.782738\n",
    "## iter  70 value 48899.085761\n",
    "## iter  80 value 48148.368137\n",
    "## iter  90 value 47469.199139\n",
    "## iter 100 value 47352.525750\n",
    "## final  value 47352.525750 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89912.023555 \n",
    "## iter  10 value 88981.010460\n",
    "## iter  20 value 87801.657472\n",
    "## iter  30 value 84516.816488\n",
    "## iter  40 value 72795.572227\n",
    "## iter  50 value 67808.437764\n",
    "## iter  60 value 66087.759840\n",
    "## iter  70 value 64563.046762\n",
    "## iter  80 value 63799.773561\n",
    "## iter  90 value 63689.607430\n",
    "## iter 100 value 63469.528942\n",
    "## final  value 63469.528942 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 98784.084568 \n",
    "## final  value 89451.931314 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 101479.481776 \n",
    "## iter  10 value 87423.483978\n",
    "## iter  20 value 85844.276495\n",
    "## iter  30 value 78832.087464\n",
    "## iter  40 value 67422.389459\n",
    "## iter  50 value 59148.073274\n",
    "## iter  60 value 51645.345277\n",
    "## iter  70 value 49110.251589\n",
    "## iter  80 value 48236.920239\n",
    "## iter  90 value 47999.660708\n",
    "## iter 100 value 47934.902056\n",
    "## final  value 47934.902056 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90287.982763 \n",
    "## iter  10 value 88539.602852\n",
    "## iter  20 value 84666.401870\n",
    "## iter  30 value 58218.989260\n",
    "## iter  40 value 49849.786767\n",
    "## iter  50 value 48166.645865\n",
    "## iter  60 value 47811.419009\n",
    "## iter  70 value 47763.233238\n",
    "## iter  80 value 47745.782672\n",
    "## iter  90 value 47455.022925\n",
    "## iter 100 value 46124.888188\n",
    "## final  value 46124.888188 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92867.400333 \n",
    "## iter  10 value 89444.459381\n",
    "## iter  20 value 89220.796444\n",
    "## iter  30 value 87789.477756\n",
    "## iter  40 value 78185.476752\n",
    "## iter  50 value 56869.179692\n",
    "## iter  60 value 51365.795406\n",
    "## iter  70 value 49515.706463\n",
    "## iter  80 value 48529.730736\n",
    "## iter  90 value 47507.587114\n",
    "## iter 100 value 46456.512497\n",
    "## final  value 46456.512497 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 104220.745608 \n",
    "## iter  10 value 89452.076981\n",
    "## iter  20 value 87734.579929\n",
    "## iter  30 value 83854.822722\n",
    "## iter  40 value 73361.851065\n",
    "## iter  50 value 57631.948721\n",
    "## iter  60 value 50213.134264\n",
    "## iter  70 value 49012.215915\n",
    "## iter  80 value 48163.795831\n",
    "## iter  90 value 47058.920367\n",
    "## iter 100 value 45908.304381\n",
    "## final  value 45908.304381 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 98159.765933 \n",
    "## iter  10 value 89477.976724\n",
    "## iter  20 value 89405.896441\n",
    "## iter  30 value 84566.883783\n",
    "## iter  40 value 72904.693323\n",
    "## iter  50 value 56407.527700\n",
    "## iter  60 value 54390.909041\n",
    "## iter  70 value 53456.617677\n",
    "## iter  80 value 52188.649053\n",
    "## iter  90 value 52051.616475\n",
    "## iter 100 value 51159.779510\n",
    "## final  value 51159.779510 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89458.467642 \n",
    "## iter  10 value 88578.605830\n",
    "## iter  20 value 87485.075571\n",
    "## iter  30 value 83375.794656\n",
    "## iter  40 value 79739.213129\n",
    "## iter  50 value 78459.435269\n",
    "## iter  60 value 78093.540012\n",
    "## iter  70 value 77865.135787\n",
    "## iter  80 value 77464.456652\n",
    "## iter  90 value 77265.266938\n",
    "## iter 100 value 66312.217810\n",
    "## final  value 66312.217810 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 108107.554405 \n",
    "## iter  10 value 87001.837479\n",
    "## iter  20 value 84539.412079\n",
    "## iter  30 value 73340.507338\n",
    "## iter  40 value 62147.257007\n",
    "## iter  50 value 55718.561577\n",
    "## iter  60 value 52902.355863\n",
    "## iter  70 value 52250.330131\n",
    "## iter  80 value 50270.765435\n",
    "## iter  90 value 49485.335095\n",
    "## iter 100 value 49089.270130\n",
    "## final  value 49089.270130 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 94071.189388 \n",
    "## iter  10 value 85726.197966\n",
    "## iter  20 value 75846.522815\n",
    "## iter  30 value 63446.631879\n",
    "## iter  40 value 59900.851941\n",
    "## iter  50 value 55508.982699\n",
    "## iter  60 value 51251.010308\n",
    "## iter  70 value 48964.233680\n",
    "## iter  80 value 48484.559718\n",
    "## iter  90 value 48208.618059\n",
    "## iter 100 value 48026.746140\n",
    "## final  value 48026.746140 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89462.564596 \n",
    "## iter  10 value 89238.984496\n",
    "## iter  20 value 86462.240659\n",
    "## iter  30 value 84059.343963\n",
    "## iter  40 value 82901.303292\n",
    "## iter  50 value 79009.184505\n",
    "## iter  60 value 74983.368623\n",
    "## iter  70 value 72013.449012\n",
    "## iter  80 value 69484.850419\n",
    "## iter  90 value 60777.949350\n",
    "## iter 100 value 55963.016939\n",
    "## final  value 55963.016939 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90245.996980 \n",
    "## final  value 89450.422203 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 89550.513658 \n",
    "## final  value 89450.422879 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 90423.672607 \n",
    "## iter  10 value 89450.494097\n",
    "## final  value 89450.426717 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90876.043867 \n",
    "## iter  10 value 89450.477456\n",
    "## iter  20 value 88483.723570\n",
    "## iter  30 value 87618.588983\n",
    "## iter  40 value 86480.582616\n",
    "## iter  50 value 85927.795908\n",
    "## iter  60 value 84843.188122\n",
    "## iter  70 value 80660.301078\n",
    "## iter  80 value 76575.733767\n",
    "## iter  90 value 73703.440609\n",
    "## iter 100 value 71153.376300\n",
    "## final  value 71153.376300 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 107501.573541 \n",
    "## iter  10 value 89336.378366\n",
    "## iter  20 value 87984.945782\n",
    "## iter  30 value 86242.864433\n",
    "## iter  40 value 83832.346754\n",
    "## iter  50 value 77980.720381\n",
    "## iter  60 value 74957.847572\n",
    "## iter  70 value 70626.644314\n",
    "## iter  80 value 67202.786474\n",
    "## iter  90 value 57274.620183\n",
    "## iter 100 value 53980.836951\n",
    "## final  value 53980.836951 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89700.882094 \n",
    "## final  value 89450.423338 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 92355.936100 \n",
    "## iter  10 value 87572.984609\n",
    "## iter  20 value 85702.695581\n",
    "## iter  30 value 83683.969848\n",
    "## iter  40 value 83042.145280\n",
    "## iter  50 value 66796.653494\n",
    "## iter  60 value 58052.215937\n",
    "## iter  70 value 48633.849092\n",
    "## iter  80 value 45584.721947\n",
    "## iter  90 value 44821.308125\n",
    "## iter 100 value 44155.157084\n",
    "## final  value 44155.157084 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 96017.939525 \n",
    "## iter  10 value 88748.306594\n",
    "## iter  20 value 87625.515959\n",
    "## iter  30 value 86601.622615\n",
    "## iter  40 value 83454.058966\n",
    "## iter  50 value 79508.506441\n",
    "## iter  60 value 72194.087667\n",
    "## iter  70 value 60140.743574\n",
    "## iter  80 value 50083.612525\n",
    "## iter  90 value 46250.852418\n",
    "## iter 100 value 44906.042678\n",
    "## final  value 44906.042678 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89897.307849 \n",
    "## final  value 89391.621407 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90414.151556 \n",
    "## final  value 89391.621407 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 90365.750129 \n",
    "## iter  10 value 88132.045598\n",
    "## iter  20 value 84640.656012\n",
    "## iter  30 value 77670.627713\n",
    "## iter  40 value 69223.255046\n",
    "## iter  50 value 58585.790356\n",
    "## iter  60 value 49119.313202\n",
    "## iter  70 value 44215.369826\n",
    "## iter  80 value 42274.021314\n",
    "## iter  90 value 41136.922556\n",
    "## iter 100 value 40937.469507\n",
    "## final  value 40937.469507 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90461.070395 \n",
    "## iter  10 value 87577.677465\n",
    "## iter  20 value 75887.949713\n",
    "## iter  30 value 68166.408952\n",
    "## iter  40 value 54233.708802\n",
    "## iter  50 value 50846.025679\n",
    "## iter  60 value 48853.991334\n",
    "## iter  70 value 47793.321940\n",
    "## iter  80 value 46385.958372\n",
    "## iter  90 value 45488.639986\n",
    "## iter 100 value 44682.330981\n",
    "## final  value 44682.330981 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 92519.109345 \n",
    "## iter  10 value 89215.240420\n",
    "## iter  20 value 85093.073049\n",
    "## iter  30 value 72025.338799\n",
    "## iter  40 value 58769.086190\n",
    "## iter  50 value 57474.690983\n",
    "## iter  60 value 56657.187967\n",
    "## iter  70 value 51469.364429\n",
    "## iter  80 value 47433.187918\n",
    "## iter  90 value 44721.820253\n",
    "## iter 100 value 42476.270355\n",
    "## final  value 42476.270355 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 91757.662012 \n",
    "## iter  10 value 89304.474127\n",
    "## iter  20 value 87824.007052\n",
    "## iter  30 value 85640.770149\n",
    "## iter  40 value 79857.641504\n",
    "## iter  50 value 66706.671264\n",
    "## iter  60 value 53896.637117\n",
    "## iter  70 value 51718.380885\n",
    "## iter  80 value 50693.951977\n",
    "## iter  90 value 48613.593901\n",
    "## iter 100 value 46419.330398\n",
    "## final  value 46419.330398 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89869.823027 \n",
    "## final  value 89391.621904 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90728.367091 \n",
    "## final  value 89391.623512 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 89485.465874 \n",
    "## iter  10 value 88823.110795\n",
    "## iter  20 value 87634.379755\n",
    "## iter  30 value 86734.944171\n",
    "## iter  40 value 71359.887804\n",
    "## iter  50 value 59533.090538\n",
    "## iter  60 value 52388.816474\n",
    "## iter  70 value 48542.652582\n",
    "## iter  80 value 46660.695739\n",
    "## iter  90 value 43976.084775\n",
    "## iter 100 value 40831.467864\n",
    "## final  value 40831.467864 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 109378.293937 \n",
    "## final  value 89406.786859 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 96500.995678 \n",
    "## final  value 89406.786862 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 92871.019992 \n",
    "## final  value 89406.786859 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 100276.932593 \n",
    "## iter  10 value 89404.164962\n",
    "## iter  20 value 85826.881854\n",
    "## iter  30 value 74703.610957\n",
    "## iter  40 value 68064.796064\n",
    "## iter  50 value 63521.104966\n",
    "## iter  60 value 54299.992436\n",
    "## iter  70 value 50360.548195\n",
    "## iter  80 value 49097.357755\n",
    "## iter  90 value 48235.213217\n",
    "## iter 100 value 46959.171200\n",
    "## final  value 46959.171200 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 92235.065453 \n",
    "## iter  10 value 88001.579297\n",
    "## iter  20 value 85690.620473\n",
    "## iter  30 value 80578.678865\n",
    "## iter  40 value 65454.402000\n",
    "## iter  50 value 61087.921043\n",
    "## iter  60 value 56625.646398\n",
    "## iter  70 value 51357.629261\n",
    "## iter  80 value 45452.500079\n",
    "## iter  90 value 44838.268211\n",
    "## iter 100 value 44797.186183\n",
    "## final  value 44797.186183 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90161.697428 \n",
    "## iter  10 value 88665.212554\n",
    "## iter  20 value 87058.670128\n",
    "## iter  30 value 82997.914043\n",
    "## iter  40 value 73796.020003\n",
    "## iter  50 value 61248.423559\n",
    "## iter  60 value 56086.805262\n",
    "## iter  70 value 51680.185440\n",
    "## iter  80 value 47918.333943\n",
    "## iter  90 value 44020.840608\n",
    "## iter 100 value 42563.431727\n",
    "## final  value 42563.431727 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92262.435372 \n",
    "## iter  10 value 89405.826192\n",
    "## iter  20 value 89400.906650\n",
    "## iter  30 value 89397.612401\n",
    "## iter  40 value 84179.184999\n",
    "## iter  50 value 72534.481630\n",
    "## iter  60 value 67946.022064\n",
    "## iter  70 value 63130.290703\n",
    "## iter  80 value 56586.643616\n",
    "## iter  90 value 52767.863459\n",
    "## iter 100 value 52004.194501\n",
    "## final  value 52004.194501 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 94082.976543 \n",
    "## iter  10 value 87839.058577\n",
    "## iter  20 value 68587.218093\n",
    "## iter  30 value 59839.739836\n",
    "## iter  40 value 54639.014595\n",
    "## iter  50 value 53514.148300\n",
    "## iter  60 value 51216.483607\n",
    "## iter  70 value 49635.618907\n",
    "## iter  80 value 49124.779101\n",
    "## iter  90 value 48720.832293\n",
    "## iter 100 value 48454.976297\n",
    "## final  value 48454.976297 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 96571.476686 \n",
    "## iter  10 value 87608.368046\n",
    "## iter  20 value 76259.709839\n",
    "## iter  30 value 69561.629945\n",
    "## iter  40 value 53277.100974\n",
    "## iter  50 value 49793.536619\n",
    "## iter  60 value 48850.046402\n",
    "## iter  70 value 48100.700654\n",
    "## iter  80 value 47826.262618\n",
    "## iter  90 value 47522.777560\n",
    "## iter 100 value 47233.743466\n",
    "## final  value 47233.743466 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89617.635237 \n",
    "## final  value 89482.969648 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89491.448519 \n",
    "## iter  10 value 87602.222555\n",
    "## iter  20 value 86349.004110\n",
    "## iter  30 value 71901.288966\n",
    "## iter  40 value 59443.310934\n",
    "## iter  50 value 52484.664988\n",
    "## iter  60 value 48809.271336\n",
    "## iter  70 value 48343.333325\n",
    "## iter  80 value 48093.946422\n",
    "## iter  90 value 47886.158094\n",
    "## iter 100 value 47747.384440\n",
    "## final  value 47747.384440 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89050.174705 \n",
    "## iter  10 value 86952.059804\n",
    "## iter  20 value 84761.571180\n",
    "## iter  30 value 75591.557748\n",
    "## iter  40 value 61948.065169\n",
    "## iter  50 value 48958.268846\n",
    "## iter  60 value 46832.997885\n",
    "## iter  70 value 44871.675950\n",
    "## iter  80 value 43348.249003\n",
    "## iter  90 value 42635.839735\n",
    "## iter 100 value 42170.959269\n",
    "## final  value 42170.959269 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90923.196940 \n",
    "## final  value 89482.977603 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 122119.096389 \n",
    "## iter  10 value 89432.811595\n",
    "## iter  20 value 88282.571123\n",
    "## iter  30 value 85186.513503\n",
    "## iter  40 value 82855.542110\n",
    "## iter  50 value 73086.938870\n",
    "## iter  60 value 61294.189067\n",
    "## iter  70 value 51571.388112\n",
    "## iter  80 value 49586.643545\n",
    "## iter  90 value 48919.816085\n",
    "## iter 100 value 48231.462650\n",
    "## final  value 48231.462650 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 92755.721528 \n",
    "## iter  10 value 88945.717018\n",
    "## iter  20 value 87488.771738\n",
    "## iter  30 value 85905.220476\n",
    "## iter  40 value 72126.651358\n",
    "## iter  50 value 62825.490117\n",
    "## iter  60 value 53342.816702\n",
    "## iter  70 value 51441.094379\n",
    "## iter  80 value 50945.715476\n",
    "## iter  90 value 50743.876624\n",
    "## iter 100 value 49185.312132\n",
    "## final  value 49185.312132 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92589.925533 \n",
    "## final  value 89482.973853 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89753.308995 \n",
    "## final  value 89483.007883 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 90863.735768 \n",
    "## iter  10 value 88246.564742\n",
    "## iter  20 value 81236.086798\n",
    "## iter  30 value 70637.013796\n",
    "## iter  40 value 53915.575346\n",
    "## iter  50 value 49441.688220\n",
    "## iter  60 value 48596.486447\n",
    "## iter  70 value 48341.329095\n",
    "## iter  80 value 48264.542260\n",
    "## iter  90 value 48250.705724\n",
    "## iter 100 value 47978.206451\n",
    "## final  value 47978.206451 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 97475.103516 \n",
    "## iter  10 value 88026.600376\n",
    "## iter  20 value 77848.647508\n",
    "## iter  30 value 62793.759286\n",
    "## iter  40 value 56932.905278\n",
    "## iter  50 value 56748.720308\n",
    "## iter  60 value 56703.274370\n",
    "## iter  70 value 54873.485836\n",
    "## iter  80 value 53522.961491\n",
    "## iter  90 value 52455.997862\n",
    "## iter 100 value 52329.806428\n",
    "## final  value 52329.806428 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90049.830140 \n",
    "## final  value 89504.737789 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 90205.639161 \n",
    "## iter  10 value 87866.069501\n",
    "## iter  20 value 86649.341349\n",
    "## iter  30 value 84948.413480\n",
    "## iter  40 value 79080.213988\n",
    "## iter  50 value 57391.060280\n",
    "## iter  60 value 54277.839916\n",
    "## iter  70 value 50745.582719\n",
    "## iter  80 value 49050.288592\n",
    "## iter  90 value 47530.715495\n",
    "## iter 100 value 47301.898824\n",
    "## final  value 47301.898824 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 93598.498170 \n",
    "## iter  10 value 89504.743552\n",
    "## final  value 89504.741783 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 91567.638664 \n",
    "## iter  10 value 89505.721210\n",
    "## iter  20 value 89493.115932\n",
    "## iter  30 value 86599.423307\n",
    "## iter  40 value 84557.371656\n",
    "## iter  50 value 80839.728504\n",
    "## iter  60 value 75663.507729\n",
    "## iter  70 value 62717.544840\n",
    "## iter  80 value 55690.226351\n",
    "## iter  90 value 52514.650735\n",
    "## iter 100 value 50964.820986\n",
    "## final  value 50964.820986 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 96847.578250 \n",
    "## iter  10 value 89519.598715\n",
    "## iter  20 value 87769.651859\n",
    "## iter  30 value 83774.510637\n",
    "## iter  40 value 67466.044138\n",
    "## iter  50 value 55861.039776\n",
    "## iter  60 value 53884.269356\n",
    "## iter  70 value 52665.626038\n",
    "## iter  80 value 50101.236590\n",
    "## iter  90 value 48675.643169\n",
    "## iter 100 value 47588.852112\n",
    "## final  value 47588.852112 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89536.785005 \n",
    "## final  value 89504.741344 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 98849.383163 \n",
    "## final  value 89505.011652 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 89773.406287 \n",
    "## iter  10 value 87595.819977\n",
    "## iter  20 value 86380.534258\n",
    "## iter  30 value 83595.845540\n",
    "## iter  40 value 66198.400211\n",
    "## iter  50 value 61469.508861\n",
    "## iter  60 value 57706.943136\n",
    "## iter  70 value 55269.325088\n",
    "## iter  80 value 50916.129739\n",
    "## iter  90 value 41896.424550\n",
    "## iter 100 value 39020.850919\n",
    "## final  value 39020.850919 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89725.533040 \n",
    "## final  value 89444.747693 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 122743.860233 \n",
    "## iter  10 value 87988.934295\n",
    "## iter  20 value 59847.476312\n",
    "## iter  30 value 49381.402491\n",
    "## iter  40 value 48274.532766\n",
    "## iter  50 value 48065.069153\n",
    "## iter  60 value 48037.985284\n",
    "## iter  70 value 48027.043998\n",
    "## iter  80 value 47999.363763\n",
    "## iter  90 value 47997.485568\n",
    "## iter 100 value 47990.392208\n",
    "## final  value 47990.392208 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 104711.413565 \n",
    "## iter  10 value 89445.097740\n",
    "## final  value 89444.747694 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 94462.726375 \n",
    "## iter  10 value 89384.499964\n",
    "## iter  20 value 89002.244830\n",
    "## iter  30 value 86751.034453\n",
    "## iter  40 value 80289.180049\n",
    "## iter  50 value 71828.370217\n",
    "## iter  60 value 69596.199140\n",
    "## iter  70 value 67990.108418\n",
    "## iter  80 value 67515.696818\n",
    "## iter  90 value 67359.930298\n",
    "## iter 100 value 67318.257457\n",
    "## final  value 67318.257457 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89400.808726 \n",
    "## iter  10 value 87996.345524\n",
    "## iter  20 value 80270.886818\n",
    "## iter  30 value 64750.794338\n",
    "## iter  40 value 55793.600119\n",
    "## iter  50 value 51772.634584\n",
    "## iter  60 value 49225.383155\n",
    "## iter  70 value 48058.886738\n",
    "## iter  80 value 46886.075031\n",
    "## iter  90 value 45967.543950\n",
    "## iter 100 value 45107.800498\n",
    "## final  value 45107.800498 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 108132.154831 \n",
    "## iter  10 value 87466.537914\n",
    "## iter  20 value 86876.312634\n",
    "## iter  30 value 80695.442013\n",
    "## iter  40 value 64948.829714\n",
    "## iter  50 value 56451.818418\n",
    "## iter  60 value 51046.946595\n",
    "## iter  70 value 48291.705594\n",
    "## iter  80 value 47168.011530\n",
    "## iter  90 value 46796.948849\n",
    "## iter 100 value 46766.306630\n",
    "## final  value 46766.306630 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89682.443101 \n",
    "## final  value 89444.748841 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 127902.358422 \n",
    "## final  value 89444.754137 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 104140.760891 \n",
    "## iter  10 value 87388.238825\n",
    "## iter  20 value 86493.735845\n",
    "## iter  30 value 84063.637992\n",
    "## iter  40 value 79587.989597\n",
    "## iter  50 value 55395.184779\n",
    "## iter  60 value 50522.384164\n",
    "## iter  70 value 48299.192831\n",
    "## iter  80 value 47363.233356\n",
    "## iter  90 value 46955.514238\n",
    "## iter 100 value 46768.772521\n",
    "## final  value 46768.772521 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89494.493719 \n",
    "## final  value 89480.217170 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 91603.316450 \n",
    "## iter  10 value 89478.733210\n",
    "## iter  20 value 89477.062062\n",
    "## final  value 89477.060662 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 91627.942695 \n",
    "## iter  10 value 87180.824674\n",
    "## iter  20 value 77835.696252\n",
    "## iter  30 value 67938.762652\n",
    "## iter  40 value 53301.302452\n",
    "## iter  50 value 50341.675303\n",
    "## iter  60 value 49749.859943\n",
    "## iter  70 value 49092.621023\n",
    "## iter  80 value 48871.351098\n",
    "## iter  90 value 48823.288200\n",
    "## iter 100 value 48810.832356\n",
    "## final  value 48810.832356 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 98030.812277 \n",
    "## iter  10 value 89480.236202\n",
    "## final  value 89480.221186 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 101445.798279 \n",
    "## iter  10 value 89469.543087\n",
    "## iter  20 value 88052.645909\n",
    "## iter  30 value 85199.572018\n",
    "## iter  40 value 75364.768837\n",
    "## iter  50 value 61930.386790\n",
    "## iter  60 value 51644.960518\n",
    "## iter  70 value 48716.332044\n",
    "## iter  80 value 47839.854970\n",
    "## iter  90 value 47538.497884\n",
    "## iter 100 value 47465.262065\n",
    "## final  value 47465.262065 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 94298.486949 \n",
    "## iter  10 value 87445.501177\n",
    "## iter  20 value 83379.079417\n",
    "## iter  30 value 80971.562299\n",
    "## iter  40 value 71898.073444\n",
    "## iter  50 value 59295.067283\n",
    "## iter  60 value 53034.326529\n",
    "## iter  70 value 50242.075613\n",
    "## iter  80 value 47997.147213\n",
    "## iter  90 value 47390.821217\n",
    "## iter 100 value 46851.673482\n",
    "## final  value 46851.673482 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 96790.984366 \n",
    "## final  value 89480.220185 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 92252.083115 \n",
    "## iter  10 value 88778.511492\n",
    "## iter  20 value 84395.581325\n",
    "## iter  30 value 74190.966864\n",
    "## iter  40 value 55623.052653\n",
    "## iter  50 value 51279.917376\n",
    "## iter  60 value 48339.378217\n",
    "## iter  70 value 46415.581394\n",
    "## iter  80 value 45472.126442\n",
    "## iter  90 value 43581.080649\n",
    "## iter 100 value 43073.429039\n",
    "## final  value 43073.429039 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 92151.931104 \n",
    "## iter  10 value 88281.747239\n",
    "## iter  20 value 85010.196864\n",
    "## iter  30 value 80676.643813\n",
    "## iter  40 value 78213.522370\n",
    "## iter  50 value 69199.758568\n",
    "## iter  60 value 61916.829034\n",
    "## iter  70 value 54818.239064\n",
    "## iter  80 value 49728.484821\n",
    "## iter  90 value 47732.852578\n",
    "## iter 100 value 46907.165032\n",
    "## final  value 46907.165032 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91284.943486 \n",
    "## final  value 89504.019388 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 95894.610263 \n",
    "## iter  10 value 89389.653569\n",
    "## iter  20 value 88503.814151\n",
    "## iter  30 value 88465.050943\n",
    "## iter  40 value 87893.294503\n",
    "## iter  50 value 78723.646366\n",
    "## iter  60 value 57996.801377\n",
    "## iter  70 value 51031.430733\n",
    "## iter  80 value 49781.032569\n",
    "## iter  90 value 49141.023412\n",
    "## iter 100 value 48913.482607\n",
    "## final  value 48913.482607 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 91250.726524 \n",
    "## iter  10 value 87517.977368\n",
    "## iter  20 value 84470.152525\n",
    "## iter  30 value 83281.871643\n",
    "## iter  40 value 63015.691765\n",
    "## iter  50 value 60499.047065\n",
    "## iter  60 value 55504.536885\n",
    "## iter  70 value 53181.406817\n",
    "## iter  80 value 52354.898963\n",
    "## iter  90 value 50995.679602\n",
    "## iter 100 value 50411.116175\n",
    "## final  value 50411.116175 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 96177.866369 \n",
    "## iter  10 value 89520.199154\n",
    "## iter  20 value 89504.625773\n",
    "## iter  30 value 89500.061337\n",
    "## iter  40 value 88699.964928\n",
    "## iter  50 value 86893.873462\n",
    "## iter  60 value 78946.277249\n",
    "## iter  70 value 71684.430356\n",
    "## iter  80 value 70954.647676\n",
    "## iter  90 value 70623.737334\n",
    "## iter 100 value 62741.299591\n",
    "## final  value 62741.299591 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 94381.291359 \n",
    "## final  value 89504.760463 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 90486.781232 \n",
    "## iter  10 value 89507.726929\n",
    "## iter  20 value 87996.732379\n",
    "## iter  30 value 86955.447676\n",
    "## iter  40 value 76543.321386\n",
    "## iter  50 value 62864.261284\n",
    "## iter  60 value 53076.216071\n",
    "## iter  70 value 50366.907213\n",
    "## iter  80 value 49873.553738\n",
    "## iter  90 value 47821.940274\n",
    "## iter 100 value 46661.612011\n",
    "## final  value 46661.612011 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 100007.503334 \n",
    "## iter  10 value 88027.268872\n",
    "## iter  20 value 82265.196198\n",
    "## iter  30 value 63060.698254\n",
    "## iter  40 value 50923.177254\n",
    "## iter  50 value 48468.113966\n",
    "## iter  60 value 47580.882595\n",
    "## iter  70 value 47352.645352\n",
    "## iter  80 value 47286.130097\n",
    "## iter  90 value 47119.617383\n",
    "## iter 100 value 46792.451809\n",
    "## final  value 46792.451809 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90091.562446 \n",
    "## iter  10 value 88319.364233\n",
    "## iter  20 value 83398.052458\n",
    "## iter  30 value 68816.340873\n",
    "## iter  40 value 60418.212405\n",
    "## iter  50 value 56316.625671\n",
    "## iter  60 value 52196.377837\n",
    "## iter  70 value 48215.507674\n",
    "## iter  80 value 47586.890839\n",
    "## iter  90 value 47204.069449\n",
    "## iter 100 value 46944.528317\n",
    "## final  value 46944.528317 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 98573.613176 \n",
    "## iter  10 value 88367.111396\n",
    "## iter  20 value 84034.562147\n",
    "## iter  30 value 75969.921110\n",
    "## iter  40 value 59488.747400\n",
    "## iter  50 value 52355.178159\n",
    "## iter  60 value 49658.521683\n",
    "## iter  70 value 48844.005660\n",
    "## iter  80 value 48730.404914\n",
    "## iter  90 value 48694.955745\n",
    "## iter 100 value 48673.177175\n",
    "## final  value 48673.177175 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91255.331201 \n",
    "## final  value 89475.245129 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 90302.921389 \n",
    "## iter  10 value 87512.662291\n",
    "## iter  20 value 87099.815622\n",
    "## iter  30 value 85599.882673\n",
    "## iter  40 value 62947.492147\n",
    "## iter  50 value 57277.765244\n",
    "## iter  60 value 49183.895976\n",
    "## iter  70 value 46952.343260\n",
    "## iter  80 value 45763.957799\n",
    "## iter  90 value 44283.010933\n",
    "## iter 100 value 43126.864288\n",
    "## final  value 43126.864288 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 98882.346653 \n",
    "## iter  10 value 88357.777643\n",
    "## iter  20 value 83419.155272\n",
    "## iter  30 value 62445.010776\n",
    "## iter  40 value 54189.577436\n",
    "## iter  50 value 49921.370363\n",
    "## iter  60 value 49017.856022\n",
    "## iter  70 value 48814.248041\n",
    "## iter  80 value 48711.867154\n",
    "## iter  90 value 48464.444053\n",
    "## iter 100 value 47945.416853\n",
    "## final  value 47945.416853 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 99424.674217 \n",
    "## iter  10 value 89476.254484\n",
    "## final  value 89475.249070 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 95226.153282 \n",
    "## iter  10 value 88751.226080\n",
    "## iter  20 value 88205.724639\n",
    "## iter  30 value 86933.480554\n",
    "## iter  40 value 83848.348014\n",
    "## iter  50 value 70362.218530\n",
    "## iter  60 value 56652.799925\n",
    "## iter  70 value 51624.967204\n",
    "## iter  80 value 50769.522102\n",
    "## iter  90 value 50241.045801\n",
    "## iter 100 value 48748.245640\n",
    "## final  value 48748.245640 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 99401.426986 \n",
    "## iter  10 value 89362.187703\n",
    "## iter  20 value 88137.865326\n",
    "## iter  30 value 76728.112580\n",
    "## iter  40 value 58420.550335\n",
    "## iter  50 value 54706.616330\n",
    "## iter  60 value 49474.827082\n",
    "## iter  70 value 47050.851809\n",
    "## iter  80 value 45913.173353\n",
    "## iter  90 value 44832.786308\n",
    "## iter 100 value 44108.150502\n",
    "## final  value 44108.150502 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89697.122225 \n",
    "## final  value 89475.245739 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 96489.055561 \n",
    "## iter  10 value 88716.964700\n",
    "## iter  20 value 86169.948355\n",
    "## iter  30 value 81037.148211\n",
    "## iter  40 value 57704.005585\n",
    "## iter  50 value 50423.110258\n",
    "## iter  60 value 48533.337746\n",
    "## iter  70 value 48139.828656\n",
    "## iter  80 value 47987.171459\n",
    "## iter  90 value 47968.430272\n",
    "## iter 100 value 47639.708719\n",
    "## final  value 47639.708719 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 92709.687722 \n",
    "## iter  10 value 86188.060239\n",
    "## iter  20 value 75322.061057\n",
    "## iter  30 value 63344.653124\n",
    "## iter  40 value 60839.526778\n",
    "## iter  50 value 59663.381817\n",
    "## iter  60 value 59115.361309\n",
    "## iter  70 value 58157.859444\n",
    "## iter  80 value 56544.998782\n",
    "## iter  90 value 56500.100291\n",
    "## iter 100 value 56404.951683\n",
    "## final  value 56404.951683 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89527.581305 \n",
    "## final  value 89463.742149 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 103253.436326 \n",
    "## iter  10 value 87664.419525\n",
    "## iter  20 value 87493.595964\n",
    "## iter  30 value 82704.477152\n",
    "## iter  40 value 62953.416285\n",
    "## iter  50 value 59128.561628\n",
    "## iter  60 value 55491.738752\n",
    "## iter  70 value 52644.715860\n",
    "## iter  80 value 51419.553256\n",
    "## iter  90 value 50668.318676\n",
    "## iter 100 value 50286.899890\n",
    "## final  value 50286.899890 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 91426.276120 \n",
    "## iter  10 value 89463.163834\n",
    "## final  value 89462.952102 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 89951.190839 \n",
    "## iter  10 value 87719.707790\n",
    "## iter  20 value 87112.897494\n",
    "## iter  30 value 80948.357095\n",
    "## iter  40 value 69502.413976\n",
    "## iter  50 value 60085.596666\n",
    "## iter  60 value 56617.333858\n",
    "## iter  70 value 52271.033536\n",
    "## iter  80 value 48732.577519\n",
    "## iter  90 value 48152.895746\n",
    "## iter 100 value 47049.124625\n",
    "## final  value 47049.124625 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 97573.591737 \n",
    "## iter  10 value 89389.162948\n",
    "## iter  20 value 86467.210154\n",
    "## iter  30 value 75274.617801\n",
    "## iter  40 value 66144.060262\n",
    "## iter  50 value 57795.442752\n",
    "## iter  60 value 51529.910339\n",
    "## iter  70 value 49014.441805\n",
    "## iter  80 value 48581.041134\n",
    "## iter  90 value 48000.874396\n",
    "## iter 100 value 46949.903137\n",
    "## final  value 46949.903137 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90508.561538 \n",
    "## iter  10 value 88420.865046\n",
    "## iter  20 value 86655.279714\n",
    "## iter  30 value 76012.701638\n",
    "## iter  40 value 70696.998281\n",
    "## iter  50 value 57259.978051\n",
    "## iter  60 value 52805.231952\n",
    "## iter  70 value 49833.262317\n",
    "## iter  80 value 47926.338995\n",
    "## iter  90 value 47151.453193\n",
    "## iter 100 value 46385.569667\n",
    "## final  value 46385.569667 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 95035.642211 \n",
    "## final  value 89463.805840 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89569.896763 \n",
    "## iter  10 value 89456.861571\n",
    "## iter  20 value 89454.904722\n",
    "## iter  30 value 87524.537681\n",
    "## iter  40 value 75284.021270\n",
    "## iter  50 value 62798.866123\n",
    "## iter  60 value 60478.016289\n",
    "## iter  70 value 59722.013671\n",
    "## iter  80 value 59390.336091\n",
    "## iter  90 value 59132.390146\n",
    "## iter 100 value 58998.154405\n",
    "## final  value 58998.154405 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90341.009685 \n",
    "## iter  10 value 88438.586557\n",
    "## iter  20 value 83321.255592\n",
    "## iter  30 value 63678.724208\n",
    "## iter  40 value 52465.394570\n",
    "## iter  50 value 49816.967162\n",
    "## iter  60 value 48378.784104\n",
    "## iter  70 value 48032.238038\n",
    "## iter  80 value 47995.066388\n",
    "## iter  90 value 47976.128362\n",
    "## iter 100 value 47703.940526\n",
    "## final  value 47703.940526 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 92136.202101 \n",
    "## final  value 89370.241172 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 95315.851999 \n",
    "## iter  10 value 88871.446719\n",
    "## iter  20 value 87930.615850\n",
    "## iter  30 value 87810.617799\n",
    "## iter  40 value 87723.055638\n",
    "## iter  50 value 85400.685711\n",
    "## iter  60 value 83458.949047\n",
    "## iter  70 value 80189.340146\n",
    "## iter  80 value 80026.029003\n",
    "## iter  90 value 77730.663211\n",
    "## iter 100 value 62374.908936\n",
    "## final  value 62374.908936 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 97629.030191 \n",
    "## iter  10 value 87652.045266\n",
    "## iter  20 value 85286.973589\n",
    "## iter  30 value 82204.934408\n",
    "## iter  40 value 78785.447477\n",
    "## iter  50 value 77556.062378\n",
    "## iter  60 value 69873.500033\n",
    "## iter  70 value 60102.883920\n",
    "## iter  80 value 53795.147154\n",
    "## iter  90 value 50520.035292\n",
    "## iter 100 value 47935.771745\n",
    "## final  value 47935.771745 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 93091.736472 \n",
    "## iter  10 value 89349.346652\n",
    "## iter  20 value 88728.159107\n",
    "## iter  30 value 83690.581426\n",
    "## iter  40 value 79340.763258\n",
    "## iter  50 value 76625.659673\n",
    "## iter  60 value 75405.306613\n",
    "## iter  70 value 74796.376262\n",
    "## iter  80 value 73746.202562\n",
    "## iter  90 value 67474.465677\n",
    "## iter 100 value 55257.681951\n",
    "## final  value 55257.681951 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 93960.087296 \n",
    "## iter  10 value 87774.193583\n",
    "## iter  20 value 87024.357207\n",
    "## iter  30 value 63216.335243\n",
    "## iter  40 value 54772.430230\n",
    "## iter  50 value 51843.093217\n",
    "## iter  60 value 46962.268639\n",
    "## iter  70 value 43905.869545\n",
    "## iter  80 value 40789.459103\n",
    "## iter  90 value 39279.760824\n",
    "## iter 100 value 39037.344606\n",
    "## final  value 39037.344606 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 97642.929202 \n",
    "## iter  10 value 89423.549670\n",
    "## iter  20 value 89404.799781\n",
    "## iter  30 value 89336.433108\n",
    "## iter  40 value 89062.107888\n",
    "## iter  50 value 88730.160602\n",
    "## iter  60 value 86961.207593\n",
    "## iter  70 value 77283.634460\n",
    "## iter  80 value 70570.245259\n",
    "## iter  90 value 58297.054738\n",
    "## iter 100 value 57461.249669\n",
    "## final  value 57461.249669 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 91760.864096 \n",
    "## iter  10 value 87684.819100\n",
    "## iter  20 value 79774.390671\n",
    "## iter  30 value 77036.919024\n",
    "## iter  40 value 74842.117809\n",
    "## iter  50 value 67452.856123\n",
    "## iter  60 value 62744.375190\n",
    "## iter  70 value 61453.922442\n",
    "## iter  80 value 60634.858923\n",
    "## iter  90 value 59019.240171\n",
    "## iter 100 value 57868.034505\n",
    "## final  value 57868.034505 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89859.867350 \n",
    "## iter  10 value 88117.690881\n",
    "## iter  20 value 67991.510320\n",
    "## iter  30 value 50541.653683\n",
    "## iter  40 value 48164.119665\n",
    "## iter  50 value 47883.354521\n",
    "## iter  60 value 47837.086152\n",
    "## iter  70 value 47797.182596\n",
    "## iter  80 value 47786.758052\n",
    "## iter  90 value 47784.418866\n",
    "## iter 100 value 47782.915079\n",
    "## final  value 47782.915079 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 95160.035336 \n",
    "## iter  10 value 89250.972647\n",
    "## iter  20 value 88374.226088\n",
    "## iter  30 value 88280.216946\n",
    "## iter  40 value 84662.113773\n",
    "## iter  50 value 81459.434843\n",
    "## iter  60 value 60464.852362\n",
    "## iter  70 value 59190.777357\n",
    "## iter  80 value 55697.024019\n",
    "## iter  90 value 54074.742846\n",
    "## iter 100 value 53411.117654\n",
    "## final  value 53411.117654 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 90908.020513 \n",
    "## final  value 89443.229634 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 91545.766870 \n",
    "## final  value 89443.229634 \n",
    "## converged\n",
    "## # weights:  196\n",
    "## initial  value 143776.487135 \n",
    "## final  value 89443.229634 \n",
    "## converged\n",
    "## # weights:  40\n",
    "## initial  value 90866.500207 \n",
    "## iter  10 value 89443.388374\n",
    "## iter  20 value 88665.911699\n",
    "## iter  30 value 84583.287380\n",
    "## iter  40 value 69664.263123\n",
    "## iter  50 value 53286.814146\n",
    "## iter  60 value 50829.401540\n",
    "## iter  70 value 49302.361938\n",
    "## iter  80 value 48233.113063\n",
    "## iter  90 value 47658.454083\n",
    "## iter 100 value 46471.983082\n",
    "## final  value 46471.983082 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 125925.648609 \n",
    "## iter  10 value 89438.411634\n",
    "## iter  20 value 89231.737152\n",
    "## iter  30 value 88634.869987\n",
    "## iter  40 value 86767.569674\n",
    "## iter  50 value 78606.198566\n",
    "## iter  60 value 69216.739572\n",
    "## iter  70 value 56379.647175\n",
    "## iter  80 value 53392.691782\n",
    "## iter  90 value 47616.842509\n",
    "## iter 100 value 43425.542432\n",
    "## final  value 43425.542432 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 92119.292547 \n",
    "## iter  10 value 89200.060879\n",
    "## iter  20 value 86476.221436\n",
    "## iter  30 value 76617.856298\n",
    "## iter  40 value 63621.197185\n",
    "## iter  50 value 54305.141464\n",
    "## iter  60 value 51174.279261\n",
    "## iter  70 value 49437.021298\n",
    "## iter  80 value 48906.374832\n",
    "## iter  90 value 48452.720417\n",
    "## iter 100 value 48361.289402\n",
    "## final  value 48361.289402 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89513.102305 \n",
    "## iter  10 value 88042.747314\n",
    "## iter  20 value 87164.190368\n",
    "## iter  30 value 84786.781744\n",
    "## iter  40 value 78281.338653\n",
    "## iter  50 value 77465.571189\n",
    "## iter  60 value 76651.291467\n",
    "## iter  70 value 75046.509552\n",
    "## iter  80 value 74383.769518\n",
    "## iter  90 value 73399.174270\n",
    "## iter 100 value 59523.169364\n",
    "## final  value 59523.169364 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 98122.327618 \n",
    "## iter  10 value 85885.657546\n",
    "## iter  20 value 82910.134396\n",
    "## iter  30 value 73215.498659\n",
    "## iter  40 value 67931.747649\n",
    "## iter  50 value 58358.820709\n",
    "## iter  60 value 49930.194231\n",
    "## iter  70 value 44018.677724\n",
    "## iter  80 value 41192.703109\n",
    "## iter  90 value 40094.648127\n",
    "## iter 100 value 39740.919701\n",
    "## final  value 39740.919701 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90826.602062 \n",
    "## iter  10 value 87743.648771\n",
    "## iter  20 value 86069.320532\n",
    "## iter  30 value 79080.495138\n",
    "## iter  40 value 56491.759910\n",
    "## iter  50 value 49486.198215\n",
    "## iter  60 value 48236.000714\n",
    "## iter  70 value 47797.710981\n",
    "## iter  80 value 47688.296012\n",
    "## iter  90 value 47556.650947\n",
    "## iter 100 value 47495.681954\n",
    "## final  value 47495.681954 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 89429.152803 \n",
    "## iter  10 value 88525.715141\n",
    "## iter  20 value 84105.359431\n",
    "## iter  30 value 73359.349468\n",
    "## iter  40 value 69317.913282\n",
    "## iter  50 value 67836.155465\n",
    "## iter  60 value 67732.244820\n",
    "## iter  70 value 67720.358665\n",
    "## iter  80 value 67397.855186\n",
    "## iter  90 value 65833.955343\n",
    "## iter 100 value 65769.859678\n",
    "## final  value 65769.859678 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90371.635794 \n",
    "## iter  10 value 86880.506402\n",
    "## iter  20 value 82594.722920\n",
    "## iter  30 value 59715.421320\n",
    "## iter  40 value 52680.435424\n",
    "## iter  50 value 48642.152366\n",
    "## iter  60 value 47555.769544\n",
    "## iter  70 value 46922.915651\n",
    "## iter  80 value 44567.224602\n",
    "## iter  90 value 41916.329306\n",
    "## iter 100 value 40617.920032\n",
    "## final  value 40617.920032 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90084.051675 \n",
    "## iter  10 value 88374.326495\n",
    "## iter  20 value 86574.248348\n",
    "## iter  30 value 79960.218370\n",
    "## iter  40 value 78370.175299\n",
    "## iter  50 value 77751.173826\n",
    "## iter  60 value 77102.059812\n",
    "## iter  70 value 76915.275845\n",
    "## iter  80 value 76793.642218\n",
    "## iter  90 value 76692.094858\n",
    "## iter 100 value 76597.904872\n",
    "## final  value 76597.904872 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 97031.598316 \n",
    "## iter  10 value 89249.775045\n",
    "## iter  20 value 85215.089382\n",
    "## iter  30 value 80934.262235\n",
    "## iter  40 value 62111.902546\n",
    "## iter  50 value 53767.097735\n",
    "## iter  60 value 50832.713717\n",
    "## iter  70 value 48835.457985\n",
    "## iter  80 value 47778.290655\n",
    "## iter  90 value 46624.324267\n",
    "## iter 100 value 45748.297727\n",
    "## final  value 45748.297727 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 116622.955412 \n",
    "## iter  10 value 89460.550614\n",
    "## iter  20 value 88645.487176\n",
    "## iter  30 value 62220.915951\n",
    "## iter  40 value 53655.098532\n",
    "## iter  50 value 50128.806451\n",
    "## iter  60 value 47874.802210\n",
    "## iter  70 value 47237.236848\n",
    "## iter  80 value 46254.479598\n",
    "## iter  90 value 44955.616276\n",
    "## iter 100 value 43973.618297\n",
    "## final  value 43973.618297 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 91172.145010 \n",
    "## iter  10 value 87686.930369\n",
    "## iter  20 value 80329.762733\n",
    "## iter  30 value 65796.533326\n",
    "## iter  40 value 55055.007986\n",
    "## iter  50 value 50507.008193\n",
    "## iter  60 value 49243.593569\n",
    "## iter  70 value 48610.341845\n",
    "## iter  80 value 48288.488775\n",
    "## iter  90 value 47863.708287\n",
    "## iter 100 value 47076.265192\n",
    "## final  value 47076.265192 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  40\n",
    "## initial  value 96485.571322 \n",
    "## final  value 89428.517120 \n",
    "## converged\n",
    "## # weights:  118\n",
    "## initial  value 89365.897779 \n",
    "## iter  10 value 87441.191205\n",
    "## iter  20 value 77641.467780\n",
    "## iter  30 value 67712.732878\n",
    "## iter  40 value 57149.652309\n",
    "## iter  50 value 50609.801775\n",
    "## iter  60 value 48832.038051\n",
    "## iter  70 value 48027.924261\n",
    "## iter  80 value 47823.319480\n",
    "## iter  90 value 47473.999051\n",
    "## iter 100 value 46770.284918\n",
    "## final  value 46770.284918 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 90030.213750 \n",
    "## iter  10 value 88194.244044\n",
    "## iter  20 value 84826.639072\n",
    "## iter  30 value 73953.160456\n",
    "## iter  40 value 59090.603809\n",
    "## iter  50 value 51184.030963\n",
    "## iter  60 value 48523.615438\n",
    "## iter  70 value 47910.270098\n",
    "## iter  80 value 47778.295397\n",
    "## iter  90 value 47572.307830\n",
    "## iter 100 value 47185.749881\n",
    "## final  value 47185.749881 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  196\n",
    "## initial  value 89453.132775 \n",
    "## iter  10 value 87534.779856\n",
    "## iter  20 value 85283.375130\n",
    "## iter  30 value 75231.419424\n",
    "## iter  40 value 65790.049811\n",
    "## iter  50 value 52441.216485\n",
    "## iter  60 value 46680.401950\n",
    "## iter  70 value 42947.781039\n",
    "## iter  80 value 42073.813101\n",
    "## iter  90 value 41541.519964\n",
    "## iter 100 value 40475.292977\n",
    "## final  value 40475.292977 \n",
    "## stopped after 100 iterations\n",
    "#Neural Network Tuned\n",
    "myGrid4 = expand.grid(size = 3,decay=0.2)\n",
    "nn2 = train(target~., data = encodeMedData, method=\"nnet\", tuneGrid = myGrid4)\n",
    "## # weights:  118\n",
    "## initial  value 91256.349852 \n",
    "## iter  10 value 89478.699666\n",
    "## iter  20 value 87261.878300\n",
    "## iter  30 value 83994.113595\n",
    "## iter  40 value 74975.927927\n",
    "## iter  50 value 64288.607395\n",
    "## iter  60 value 52563.639222\n",
    "## iter  70 value 49365.543290\n",
    "## iter  80 value 48350.406741\n",
    "## iter  90 value 47932.481385\n",
    "## iter 100 value 47793.247527\n",
    "## final  value 47793.247527 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89746.467117 \n",
    "## iter  10 value 89383.052012\n",
    "## iter  20 value 87605.500347\n",
    "## iter  30 value 68574.635781\n",
    "## iter  40 value 58159.340233\n",
    "## iter  50 value 51854.530856\n",
    "## iter  60 value 49135.735599\n",
    "## iter  70 value 47309.088225\n",
    "## iter  80 value 46186.015347\n",
    "## iter  90 value 45404.279124\n",
    "## iter 100 value 44586.955147\n",
    "## final  value 44586.955147 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 94989.438376 \n",
    "## iter  10 value 85883.453903\n",
    "## iter  20 value 76572.798061\n",
    "## iter  30 value 59783.949030\n",
    "## iter  40 value 52830.933784\n",
    "## iter  50 value 49683.473125\n",
    "## iter  60 value 49365.421409\n",
    "## iter  70 value 48813.778201\n",
    "## iter  80 value 47532.720995\n",
    "## iter  90 value 46823.021940\n",
    "## iter 100 value 45368.007392\n",
    "## final  value 45368.007392 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 115476.932605 \n",
    "## iter  10 value 88373.398497\n",
    "## iter  20 value 72426.042269\n",
    "## iter  30 value 59244.452818\n",
    "## iter  40 value 58133.180918\n",
    "## iter  50 value 53356.667891\n",
    "## iter  60 value 50809.950626\n",
    "## iter  70 value 45793.465933\n",
    "## iter  80 value 43750.473722\n",
    "## iter  90 value 42810.613759\n",
    "## iter 100 value 42000.931744\n",
    "## final  value 42000.931744 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 92021.512388 \n",
    "## iter  10 value 89466.479668\n",
    "## iter  20 value 88651.618371\n",
    "## iter  30 value 86109.658271\n",
    "## iter  40 value 78057.993073\n",
    "## iter  50 value 62686.918006\n",
    "## iter  60 value 53516.807367\n",
    "## iter  70 value 51104.453785\n",
    "## iter  80 value 49118.400144\n",
    "## iter  90 value 47829.792600\n",
    "## iter 100 value 46910.825954\n",
    "## final  value 46910.825954 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90306.206482 \n",
    "## iter  10 value 87840.272130\n",
    "## iter  20 value 83066.894444\n",
    "## iter  30 value 79800.449636\n",
    "## iter  40 value 74579.638401\n",
    "## iter  50 value 57419.921356\n",
    "## iter  60 value 51789.010142\n",
    "## iter  70 value 49014.316804\n",
    "## iter  80 value 47106.019263\n",
    "## iter  90 value 46607.034912\n",
    "## iter 100 value 45762.693394\n",
    "## final  value 45762.693394 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 91272.689355 \n",
    "## iter  10 value 88551.492062\n",
    "## iter  20 value 86901.697899\n",
    "## iter  30 value 86587.076050\n",
    "## iter  40 value 82745.301748\n",
    "## iter  50 value 73985.057884\n",
    "## iter  60 value 56716.158219\n",
    "## iter  70 value 54552.916478\n",
    "## iter  80 value 49561.272438\n",
    "## iter  90 value 45428.943727\n",
    "## iter 100 value 42382.013393\n",
    "## final  value 42382.013393 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 110351.400900 \n",
    "## iter  10 value 88839.777934\n",
    "## iter  20 value 87456.885093\n",
    "## iter  30 value 82989.433533\n",
    "## iter  40 value 75949.612293\n",
    "## iter  50 value 60770.577484\n",
    "## iter  60 value 57003.520207\n",
    "## iter  70 value 51864.369408\n",
    "## iter  80 value 48451.075175\n",
    "## iter  90 value 44784.130151\n",
    "## iter 100 value 41699.605848\n",
    "## final  value 41699.605848 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89923.334851 \n",
    "## iter  10 value 89444.458127\n",
    "## iter  20 value 89441.370333\n",
    "## iter  30 value 89147.891665\n",
    "## iter  40 value 87750.796314\n",
    "## iter  50 value 78833.001647\n",
    "## iter  60 value 60769.164764\n",
    "## iter  70 value 52400.912149\n",
    "## iter  80 value 48759.987918\n",
    "## iter  90 value 48267.273961\n",
    "## iter 100 value 48149.751416\n",
    "## final  value 48149.751416 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 105314.568890 \n",
    "## iter  10 value 89409.589849\n",
    "## iter  20 value 89386.668157\n",
    "## iter  30 value 88231.055693\n",
    "## iter  40 value 76392.732238\n",
    "## iter  50 value 60338.697910\n",
    "## iter  60 value 56489.805115\n",
    "## iter  70 value 55150.558626\n",
    "## iter  80 value 52816.432593\n",
    "## iter  90 value 49212.805791\n",
    "## iter 100 value 48415.330728\n",
    "## final  value 48415.330728 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 102864.223941 \n",
    "## iter  10 value 87039.734703\n",
    "## iter  20 value 83814.833734\n",
    "## iter  30 value 75435.617274\n",
    "## iter  40 value 67194.816525\n",
    "## iter  50 value 60321.093179\n",
    "## iter  60 value 55414.627017\n",
    "## iter  70 value 51477.571544\n",
    "## iter  80 value 49624.159025\n",
    "## iter  90 value 44872.125490\n",
    "## iter 100 value 42157.641089\n",
    "## final  value 42157.641089 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 93339.492666 \n",
    "## iter  10 value 87647.280391\n",
    "## iter  20 value 65191.808937\n",
    "## iter  30 value 54076.453138\n",
    "## iter  40 value 50081.266968\n",
    "## iter  50 value 49665.253514\n",
    "## iter  60 value 49612.995588\n",
    "## iter  70 value 49269.599361\n",
    "## iter  80 value 48142.499581\n",
    "## iter  90 value 47148.971781\n",
    "## iter 100 value 46035.312024\n",
    "## final  value 46035.312024 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89789.318696 \n",
    "## iter  10 value 89415.249444\n",
    "## iter  20 value 87394.076514\n",
    "## iter  30 value 85348.375738\n",
    "## iter  40 value 84198.917470\n",
    "## iter  50 value 81626.008740\n",
    "## iter  60 value 71139.557700\n",
    "## iter  70 value 58324.421649\n",
    "## iter  80 value 44402.536511\n",
    "## iter  90 value 41589.734841\n",
    "## iter 100 value 39851.287362\n",
    "## final  value 39851.287362 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 108891.809435 \n",
    "## iter  10 value 89371.943278\n",
    "## iter  20 value 86902.219211\n",
    "## iter  30 value 82723.440998\n",
    "## iter  40 value 58494.487899\n",
    "## iter  50 value 53396.982713\n",
    "## iter  60 value 49969.508610\n",
    "## iter  70 value 49287.267490\n",
    "## iter  80 value 46885.565270\n",
    "## iter  90 value 45762.881213\n",
    "## iter 100 value 44876.154963\n",
    "## final  value 44876.154963 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 91528.572072 \n",
    "## iter  10 value 88274.054272\n",
    "## iter  20 value 86997.283016\n",
    "## iter  30 value 80786.465879\n",
    "## iter  40 value 64422.958295\n",
    "## iter  50 value 56155.479955\n",
    "## iter  60 value 52014.241072\n",
    "## iter  70 value 49958.588688\n",
    "## iter  80 value 48604.311371\n",
    "## iter  90 value 47604.730439\n",
    "## iter 100 value 46882.137715\n",
    "## final  value 46882.137715 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89973.266680 \n",
    "## iter  10 value 87513.121523\n",
    "## iter  20 value 83634.549844\n",
    "## iter  30 value 62987.876097\n",
    "## iter  40 value 52540.709560\n",
    "## iter  50 value 50447.706400\n",
    "## iter  60 value 50036.344802\n",
    "## iter  70 value 48349.979162\n",
    "## iter  80 value 47319.266358\n",
    "## iter  90 value 46319.203718\n",
    "## iter 100 value 45317.971682\n",
    "## final  value 45317.971682 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 92352.506894 \n",
    "## iter  10 value 89320.985408\n",
    "## iter  20 value 88611.685619\n",
    "## iter  30 value 84580.489667\n",
    "## iter  40 value 76477.951716\n",
    "## iter  50 value 71983.134072\n",
    "## iter  60 value 69558.635852\n",
    "## iter  70 value 55053.976830\n",
    "## iter  80 value 50892.361042\n",
    "## iter  90 value 46962.033102\n",
    "## iter 100 value 44538.670634\n",
    "## final  value 44538.670634 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89928.763075 \n",
    "## iter  10 value 87220.910653\n",
    "## iter  20 value 84697.386634\n",
    "## iter  30 value 71218.098605\n",
    "## iter  40 value 57857.833172\n",
    "## iter  50 value 52552.968288\n",
    "## iter  60 value 50374.747296\n",
    "## iter  70 value 49167.795884\n",
    "## iter  80 value 48763.926936\n",
    "## iter  90 value 47317.955628\n",
    "## iter 100 value 44268.053591\n",
    "## final  value 44268.053591 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89746.331238 \n",
    "## iter  10 value 89291.334073\n",
    "## iter  20 value 87220.538523\n",
    "## iter  30 value 83540.433797\n",
    "## iter  40 value 58342.189923\n",
    "## iter  50 value 54879.849489\n",
    "## iter  60 value 51266.916831\n",
    "## iter  70 value 48602.259810\n",
    "## iter  80 value 48065.180921\n",
    "## iter  90 value 46495.091412\n",
    "## iter 100 value 45928.010634\n",
    "## final  value 45928.010634 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90979.951967 \n",
    "## iter  10 value 89412.413121\n",
    "## iter  20 value 89371.750756\n",
    "## iter  30 value 89038.386208\n",
    "## iter  40 value 87172.668103\n",
    "## iter  50 value 78754.959795\n",
    "## iter  60 value 59462.576171\n",
    "## iter  70 value 52569.110403\n",
    "## iter  80 value 48930.571605\n",
    "## iter  90 value 47617.226584\n",
    "## iter 100 value 46963.283720\n",
    "## final  value 46963.283720 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 96062.400094 \n",
    "## iter  10 value 87530.993119\n",
    "## iter  20 value 85662.936241\n",
    "## iter  30 value 67222.653706\n",
    "## iter  40 value 63562.712223\n",
    "## iter  50 value 52883.170584\n",
    "## iter  60 value 50382.172936\n",
    "## iter  70 value 46440.604724\n",
    "## iter  80 value 46092.933277\n",
    "## iter  90 value 45204.442202\n",
    "## iter 100 value 44094.033394\n",
    "## final  value 44094.033394 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90682.831648 \n",
    "## iter  10 value 89341.599443\n",
    "## iter  20 value 88278.099274\n",
    "## iter  30 value 81558.414281\n",
    "## iter  40 value 63714.987160\n",
    "## iter  50 value 53657.565190\n",
    "## iter  60 value 51083.353508\n",
    "## iter  70 value 49466.549155\n",
    "## iter  80 value 47689.194174\n",
    "## iter  90 value 46961.380158\n",
    "## iter 100 value 46351.834238\n",
    "## final  value 46351.834238 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 90865.015480 \n",
    "## iter  10 value 89189.999807\n",
    "## iter  20 value 85737.785650\n",
    "## iter  30 value 80523.850150\n",
    "## iter  40 value 71490.872676\n",
    "## iter  50 value 53689.204791\n",
    "## iter  60 value 49750.986077\n",
    "## iter  70 value 48204.499827\n",
    "## iter  80 value 47612.702110\n",
    "## iter  90 value 47249.314985\n",
    "## iter 100 value 46400.795898\n",
    "## final  value 46400.795898 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 109784.210974 \n",
    "## iter  10 value 87472.203743\n",
    "## iter  20 value 82495.423848\n",
    "## iter  30 value 67303.614643\n",
    "## iter  40 value 60111.490466\n",
    "## iter  50 value 58047.662519\n",
    "## iter  60 value 56197.458002\n",
    "## iter  70 value 50261.472855\n",
    "## iter  80 value 47234.372024\n",
    "## iter  90 value 45720.514646\n",
    "## iter 100 value 44565.579959\n",
    "## final  value 44565.579959 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 99503.943448 \n",
    "## iter  10 value 87980.661349\n",
    "## iter  20 value 86906.716415\n",
    "## iter  30 value 85747.207073\n",
    "## iter  40 value 71658.927993\n",
    "## iter  50 value 57592.048102\n",
    "## iter  60 value 50152.334119\n",
    "## iter  70 value 48145.721113\n",
    "## iter  80 value 47392.860512\n",
    "## iter  90 value 47258.537940\n",
    "## iter 100 value 46890.289367\n",
    "## final  value 46890.289367 \n",
    "## stopped after 100 iterations\n",
    "## # weights:  118\n",
    "## initial  value 89526.592281 \n",
    "## iter  10 value 88077.017712\n",
    "## iter  20 value 87369.278617\n",
    "## iter  30 value 85328.152240\n",
    "## iter  40 value 73774.676520\n",
    "## iter  50 value 64078.396433\n",
    "## iter  60 value 55577.487394\n",
    "## iter  70 value 51111.748342\n",
    "## iter  80 value 46994.826741\n",
    "## iter  90 value 43757.475842\n",
    "## iter 100 value 42051.190756\n",
    "## final  value 42051.190756 \n",
    "## stopped after 100 iterations\n",
    "nn1\n",
    "## Neural Network \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Bootstrapped (25 reps) \n",
    "## Summary of sample sizes: 129880, 129880, 129880, 129880, 129880, 129880, ... \n",
    "## Resampling results across tuning parameters:\n",
    "## \n",
    "##   size  decay  Accuracy   Kappa    \n",
    "##   1     0e+00  0.5810253  0.0777932\n",
    "##   1     1e-04  0.6442285  0.2220884\n",
    "##   1     1e-01  0.7377368  0.4384307\n",
    "##   3     0e+00  0.7505893  0.4640479\n",
    "##   3     1e-04  0.8116538  0.6024803\n",
    "##   3     1e-01  0.8461294  0.6826632\n",
    "##   5     0e+00  0.7464314  0.4559628\n",
    "##   5     1e-04  0.8525171  0.6957260\n",
    "##   5     1e-01  0.8637357  0.7225429\n",
    "## \n",
    "## Accuracy was used to select the optimal model using the largest value.\n",
    "## The final values used for the model were size = 5 and decay = 0.1.\n",
    "nn2\n",
    "## Neural Network \n",
    "## \n",
    "## 129880 samples\n",
    "##     22 predictor\n",
    "##      2 classes: 'neutral or dissatisfied', 'satisfied' \n",
    "## \n",
    "## No pre-processing\n",
    "## Resampling: Bootstrapped (25 reps) \n",
    "## Summary of sample sizes: 129880, 129880, 129880, 129880, 129880, 129880, ... \n",
    "## Resampling results:\n",
    "## \n",
    "##   Accuracy   Kappa    \n",
    "##   0.8684512  0.7318835\n",
    "## \n",
    "## Tuning parameter 'size' was held constant at a value of 3\n",
    "## Tuning\n",
    "##  parameter 'decay' was held constant at a value of 0.2\n",
    "\n",
    "Conclusion.  Conclude on your final model:  what imputation method did you use?  What encoding methods did you use?  What are selections of hyperparameters? \n",
    "The overall best model which was implemented on this data was the random forest. There was no pre-processing. The resampling was cross-validated (2 fold). The summary of the sample sizes were 64,940 and 64,940. The mtry was 2. The splitrule was gini. The Accuracy was 0.8907530. The kappa was 0.7788438.  The tuning parameter was min.node.size, which held a constant value of 1. The final values used for the model were mtry = 19, splitrule = gini and min.node.size = 1. The was preformed using the median data set. The data was based on a scales of 0 to 5. Zero being not applicable and 5 being satisfied. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
